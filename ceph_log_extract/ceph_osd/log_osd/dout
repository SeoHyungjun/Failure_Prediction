Cscope tag: dout
   #   line  filename / context / line
   1    291  osd/ECBackend.cc <<handle_recovery_push>>
             dout(10) << __func__ << " Out of space (failsafe) processing push request." << dendl;
   2    306  osd/ECBackend.cc <<handle_recovery_push>>
             dout(10) << __func__ << ": Adding oid "
   3    341  osd/ECBackend.cc <<handle_recovery_push>>
             dout(10) << __func__ << ": Removing oid "
   4    541  osd/ECBackend.cc <<continue_recovery_op>>
             dout(10) << __func__ << ": continuing " << op << dendl;
   5    566  osd/ECBackend.cc <<continue_recovery_op>>
             dout(10) << __func__ << ": canceling recovery op for obj " << op.hoid
   6    583  osd/ECBackend.cc <<continue_recovery_op>>
             dout(10) << __func__ << ": IDLE return " << op << dendl;
   7    609  osd/ECBackend.cc <<continue_recovery_op>>
             dout(10) << __func__ << ": before_progress=" << op.recovery_progress
   8    639  osd/ECBackend.cc <<continue_recovery_op>>
             dout(10) << __func__ << ": READING return " << op << dendl;
   9    650  osd/ECBackend.cc <<continue_recovery_op>>
             dout(10) << __func__ << ": on_peer_recover on " << *i
  10    663  osd/ECBackend.cc <<continue_recovery_op>>
             dout(10) << __func__ << ": WRITING return " << op << dendl;
  11    668  osd/ECBackend.cc <<continue_recovery_op>>
             dout(10) << __func__ << ": WRITING continue " << op << dendl;
  12    692  osd/ECBackend.cc <<run_recovery_op>>
             dout(10) << __func__ << ": starting " << *i << dendl;
  13    737  osd/ECBackend.cc <<recover_object>>
             dout(10) << "checking " << *i << dendl;
  14    743  osd/ECBackend.cc <<recover_object>>
             dout(10) << __func__ << ": built op " << h->ops.back() << dendl;
  15    756  osd/ECBackend.cc <<_handle_message>>
             dout(10) << __func__ << ": " << *_op->get_req() << dendl;
  16    899  osd/ECBackend.cc <<handle_sub_write>>
             dout(10) << __func__ << ": removing object " << *i
  17    910  osd/ECBackend.cc <<handle_sub_write>>
             dout(30) << __func__ << " missing before " << ge...)->get_log().get_missing().get_items() << dendl;
  18    913  osd/ECBackend.cc <<handle_sub_write>>
             dout(30) << __func__ << " is_missing " << pmissing.is_missing(op.soid) << dendl;
  19    915  osd/ECBackend.cc <<handle_sub_write>>
             dout(30) << " add_next_event entry " << e << dendl;
  20    917  osd/ECBackend.cc <<handle_sub_write>>
             dout(30) << " entry is_delete " << e.is_delete() << dendl;
  21    944  osd/ECBackend.cc <<handle_sub_write>>
             dout(30) << __func__ << " missing after" << get_...)->get_log().get_missing().get_items() << dendl;
  22    972  osd/ECBackend.cc <<handle_sub_read>>
             dout(5) << __func__ << ": No hinfo for " << i->first << dendl;
  23    981  osd/ECBackend.cc <<handle_sub_read>>
             dout(25) << __func__ << " case1: reading the complete chunk/shard." << dendl;
  24    989  osd/ECBackend.cc <<handle_sub_read>>
             dout(25) << __func__ << " case2: going to do fragmented read." << dendl;
  25   1008  osd/ECBackend.cc <<handle_sub_read>>
             dout(5) << __func__ << ": Error " << r
  26   1012  osd/ECBackend.cc <<handle_sub_read>>
             dout(20) << __func__ << " read request=" << j->g...< " r=" << r << " len=" << bl.length() << dendl;
  27   1028  osd/ECBackend.cc <<handle_sub_read>>
             dout(20) << __func__ << ": Checking hash of " << i->first << dendl;
  28   1034  osd/ECBackend.cc <<handle_sub_read>>
             dout(5) << __func__ << ": Bad hash for " << i->first << " digest 0x"
  29   1052  osd/ECBackend.cc <<handle_sub_read>>
             dout(10) << __func__ << ": fulfilling attr request on "
  30   1095  osd/ECBackend.cc <<handle_sub_write_reply>>
             dout(10) << __func__ << " Calling on_all_commit on " << i->second << dendl;
  31   1110  osd/ECBackend.cc <<handle_sub_read_reply>>
             dout(10) << __func__ << ": reply " << op << dendl;
  32   1114  osd/ECBackend.cc <<handle_sub_read_reply>>
             dout(20) << __func__ << ": dropped " << op << dendl;
  33   1124  osd/ECBackend.cc <<handle_sub_read_reply>>
             dout(20) << __func__ << " to_read skipping" << dendl;
  34   1151  osd/ECBackend.cc <<handle_sub_read_reply>>
             dout(20) << __func__ << " to_read skipping" << dendl;
  35   1164  osd/ECBackend.cc <<handle_sub_read_reply>>
             dout(20) << __func__ << " shard=" << from << " error=" << i->second << dendl;
  36   1189  osd/ECBackend.cc <<handle_sub_read_reply>>
             dout(20) << __func__ << " have shard=" << j->first.shard << dendl;
  37   1194  osd/ECBackend.cc <<handle_sub_read_reply>>
             dout(20) << __func__ << " minimum_to_decode failed" << dendl;
  38   1219  osd/ECBackend.cc <<handle_sub_read_reply>>
             dout(10) << __func__ << ": Not ignoring errors, use one shard err=" << err << dendl;
  39   1225  osd/ECBackend.cc <<handle_sub_read_reply>>
             dout(10) << __func__ << " Error(s) ignored for " << iter->first
  40   1235  osd/ECBackend.cc <<handle_sub_read_reply>>
             dout(20) << __func__ << " Complete: " << rop << dendl;
  41   1239  osd/ECBackend.cc <<handle_sub_read_reply>>
             dout(10) << __func__ << " readop not complete: " << rop << dendl;
  42   1319  osd/ECBackend.cc <<filter_read_op>>
             dout(10) << __func__ << ": canceling " << req
  43   1362  osd/ECBackend.cc <<on_change>>
             dout(10) << __func__ << dendl;
  44   1378  osd/ECBackend.cc <<on_change>>
             dout(10) << __func__ << ": cancelling " << i->second << dendl;
  45   1649  osd/ECBackend.cc <<do_read_op>>
             dout(10) << __func__ << ": starting read " << op << dendl;
  46   1713  osd/ECBackend.cc <<do_read_op>>
             dout(10) << __func__ << ": started " << op << dendl;
  47   1793  osd/ECBackend.cc <<start_rmw>>
             dout(10) << __func__ << ": " << *op << dendl;
  48   1807  osd/ECBackend.cc <<try_state_to_reads>>
             dout(20) << __func__ << ": blocking " << *op
  49   1815  osd/ECBackend.cc <<try_state_to_reads>>
             dout(20) << __func__ << ": invalidating cache after this op"
  50   1857  osd/ECBackend.cc <<try_state_to_reads>>
             dout(10) << __func__ << ": " << *op << dendl;
  51   1884  osd/ECBackend.cc <<try_reads_to_commit>>
             dout(10) << __func__ << ": starting commit on " << *op << dendl;
  52   1885  osd/ECBackend.cc <<try_reads_to_commit>>
             dout(20) << __func__ << ": " << cache << dendl;
  53   1930  osd/ECBackend.cc <<try_reads_to_commit>>
             dout(20) << __func__ << ": " << cache << dendl;
  54   1931  osd/ECBackend.cc <<try_reads_to_commit>>
             dout(20) << __func__ << ": written: " << written << dendl;
  55   1932  osd/ECBackend.cc <<try_reads_to_commit>>
             dout(20) << __func__ << ": op: " << *op << dendl;
  56   1948  osd/ECBackend.cc <<try_reads_to_commit>>
             dout(20) << __func__ << ": written_set: " << written_set << dendl;
  57   1953  osd/ECBackend.cc <<try_reads_to_commit>>
             dout(20) << __func__ << ": " << hpair << dendl;
  58   2041  osd/ECBackend.cc <<try_finish_rmw>>
             dout(10) << __func__ << ": " << *op << dendl;
  59   2042  osd/ECBackend.cc <<try_finish_rmw>>
             dout(20) << __func__ << ": " << cache << dendl;
  60   2073  osd/ECBackend.cc <<try_finish_rmw>>
             dout(20) << __func__ << ": clearing pipeline_state "
  61   2333  osd/ECBackend.cc <<send_all_remaining_reads>>
             dout(10) << __func__ << " have/error shards=" << already_read << dendl;
  62   2398  osd/ECBackend.cc <<be_deep_scrub>>
             dout(10) << __func__ << " " << poid << " pos " << pos << dendl;
  63   2430  osd/ECBackend.cc <<be_deep_scrub>>
             dout(20) << __func__ << " " << poid << " got "
  64   2436  osd/ECBackend.cc <<be_deep_scrub>>
             dout(20) << __func__ << " " << poid << " got "
  65   2452  osd/ECBackend.cc <<be_deep_scrub>>
             dout(0) << "_scan_list " << poid << " could not retrieve hash info" << dendl;
  66   2460  osd/ECBackend.cc <<be_deep_scrub>>
             dout(0) << "_scan_list " << poid << " got incorrect size on read 0x"
  67   2471  osd/ECBackend.cc <<be_deep_scrub>>
             dout(0) << "_scan_list " << poid << " got incorrect hash on read 0x"
  68    484  osd/OSD.cc <<agent_entry>>
             dout(10) << __func__ << " start" << dendl;
  69    489  osd/OSD.cc <<agent_entry>>
             dout(20) << __func__ << " empty queue" << dendl;
  70    495  osd/OSD.cc <<agent_entry>>
             dout(10) << __func__
  71    503  osd/OSD.cc <<agent_entry>>
             dout(20) << __func__ << " oids " << agent_oids << dendl;
  72    518  osd/OSD.cc <<agent_entry>>
             dout(10) << "high_count " << flush_mode_high_count
  73    523  osd/OSD.cc <<agent_entry>>
             dout(10) << __func__ << " " << pg->pg_id
  74    537  osd/OSD.cc <<agent_entry>>
             dout(10) << __func__ << " finish" << dendl;
  75    576  osd/OSD.cc <<promote_throttle_recalibrate>>
             dout(10) << __func__ << " " << attempts << " attempts, promoted "
  76    591  osd/OSD.cc <<promote_throttle_recalibrate>>
             dout(20) << __func__ << " po " << po << " pb " << pb << " avg_size "
  77    604  osd/OSD.cc <<promote_throttle_recalibrate>>
             dout(20) << __func__ << " new_prob " << new_prob << dendl;
  78    621  osd/OSD.cc <<promote_throttle_recalibrate>>
             dout(10) << __func__ << " actual " << actual
  79    695  osd/OSD.cc <<check_full_status>>
             dout(20) << __func__ << " cur ratio " << ratio
  80    706  osd/OSD.cc <<check_full_status>>
             dout(10) << __func__ << " " << get_full_state_name(cur_state)
  81    959  osd/OSD.cc <<requeue_pg_temp>>
             dout(10) << __func__ << " " << old_wanted << " + " << old_pending << " -> "
  82    978  osd/OSD.cc <<send_pg_temp>>
             dout(10) << "send_pg_temp " << pg_temp_wanted << dendl;
  83    998  osd/OSD.cc <<send_pg_created>>
             dout(20) << __func__ << dendl;
  84   1022  osd/OSD.cc <<note_peer_epoch>>
             dout(10) << "note_peer_epoch osd." << peer << " has " << e << dendl;
  85   1025  osd/OSD.cc <<note_peer_epoch>>
             dout(30) << "note_peer_epoch osd." << peer << " has " << p->second << " >= " << e << dendl;
  86   1029  osd/OSD.cc <<note_peer_epoch>>
             dout(10) << "note_peer_epoch osd." << peer << " now has " << e << dendl;
  87   1041  osd/OSD.cc <<forget_peer_epoch>>
             dout(10) << "forget_peer_epoch osd." << peer << " as_of " << as_of
  88   1045  osd/OSD.cc <<forget_peer_epoch>>
             dout(10) << "forget_peer_epoch osd." << peer << " as_of " << as_of
  89   1055  osd/OSD.cc <<should_share_map>>
             dout(20) << "should_share_map "
  90   1063  osd/OSD.cc <<should_share_map>>
             dout(20) << "client session last_sent_epoch: "
  91   1082  osd/OSD.cc <<should_share_map>>
             dout(10) << name << " " << con->get_peer_addr()
  92   1099  osd/OSD.cc <<share_map>>
             dout(20) << "share_map "
  93   1113  osd/OSD.cc <<share_map>>
             dout(10) << name << " has old map " << epoch
  94   1124  osd/OSD.cc <<share_map>>
             dout(10) << name << " " << con->get_peer_addr()
  95   1145  osd/OSD.cc <<share_map_peer>>
             dout(20) << "share_map_peer " << con << " already has epoch " << pe << dendl;
  96   1147  osd/OSD.cc <<share_map_peer>>
             dout(20) << "share_map_peer " << con << " don't know epoch, doing nothing" << dendl;
  97   1160  osd/OSD.cc <<can_inc_scrubs_pending>>
             dout(20) << __func__ << " " << scrubs_pending << " -> " << (scrubs_pending+1)
  98   1165  osd/OSD.cc <<can_inc_scrubs_pending>>
             dout(20) << __func__ << " " << scrubs_pending << " + " << scrubs_active
  99   1178  osd/OSD.cc <<inc_scrubs_pending>>
             dout(20) << "inc_scrubs_pending " << scrubs_pending << " -> " << (scrubs_pending+1)
 100   1183  osd/OSD.cc <<inc_scrubs_pending>>
             dout(20) << "inc_scrubs_pending " << scrubs_pend...>= max " << cct->_conf->osd_max_scrubs << dendl;
 101   1193  osd/OSD.cc <<dec_scrubs_pending>>
             dout(20) << "dec_scrubs_pending " << scrubs_pending << " -> " << (scrubs_pending-1)
 102   1206  osd/OSD.cc <<inc_scrubs_active>>
             dout(20) << "inc_scrubs_active " << (scrubs_active-1) << " -> " << scrubs_active
 103   1211  osd/OSD.cc <<inc_scrubs_active>>
             dout(20) << "inc_scrubs_active " << (scrubs_active-1) << " -> " << scrubs_active
 104   1221  osd/OSD.cc <<dec_scrubs_active>>
             dout(20) << "dec_scrubs_active " << scrubs_active << " -> " << (scrubs_active-1)
 105   1266  osd/OSD.cc <<prepare_to_stop>>
             dout(0) << __func__ << " telling mon we are shutting down" << dendl;
 106   1281  osd/OSD.cc <<prepare_to_stop>>
             dout(0) << __func__ << " starting shutdown" << dendl;
 107   1290  osd/OSD.cc <<got_stop_ack>>
             dout(0) << __func__ << " starting shutdown" << dendl;
 108   1294  osd/OSD.cc <<got_stop_ack>>
             dout(10) << __func__ << " ignoring msg" << dendl;
 109   1334  osd/OSD.cc <<send_incremental_map>>
             dout(10) << "send_incremental_map " << since << " -> " << to
 110   1352  osd/OSD.cc <<send_incremental_map>>
             dout(10) << " " << (to - since) << " > max " << cct->_conf->osd_map_share_max_epochs
 111   1405  osd/OSD.cc <<_add_map_bl>>
             dout(10) << "add_map_bl " << e << " " << bl.length() << " bytes" << dendl;
 112   1416  osd/OSD.cc <<_add_map_inc_bl>>
             dout(10) << "add_map_inc_bl " << e << " " << bl.length() << " bytes" << dendl;
 113   1432  osd/OSD.cc <<get_deleted_pool_pg_num>>
             dout(20) << __func__ << " " << pool << " loading" << dendl;
 114   1441  osd/OSD.cc <<get_deleted_pool_pg_num>>
             dout(20) << __func__ << " " << pool << " got " << pi.get_pg_num() << dendl;
 115   1469  osd/OSD.cc <<try_get_map>>
             dout(30) << "get_map " << epoch << " -cached" << dendl;
 116   1479  osd/OSD.cc <<try_get_map>>
             dout(30) << "get_map " << epoch << " - miss, below lower bound" << dendl;
 117   1487  osd/OSD.cc <<try_get_map>>
             dout(20) << "get_map " << epoch << " - loading and decoding " << map << dendl;
 118   1496  osd/OSD.cc <<try_get_map>>
             dout(20) << "get_map " << epoch << " - return initial " << map << dendl;
 119   1553  osd/OSD.cc <<handle_misdirected_op>>
             dout(7) << __func__ << ": " << *pg << " no longer have map for "
 120   1563  osd/OSD.cc <<handle_misdirected_op>>
             dout(7) << __func__ << ": " << *pg << " primary changed since "
 121   1569  osd/OSD.cc <<handle_misdirected_op>>
             dout(7) << *pg << " misdirected op in " << m->get_map_epoch() << dendl;
 122   1605  osd/OSD.cc <<queue_for_snap_trim>>
             dout(10) << "queueing " << *pg << " for snaptrim" << dendl;
 123   1636  osd/OSD.cc <<queue_for_pg_delete>>
             dout(10) << __func__ << " on " << pgid << " e " << e << dendl;
 124   1731  osd/OSD.cc <<mkfs>>
             dout(0) << " have superblock" << dendl;
 125   2242  osd/OSD.cc <<asok_command>>
             dout(1) << "triggering manual compaction" << dendl;
 126   2247  osd/OSD.cc <<asok_command>>
             dout(1) << "finished manual compaction in "
 127   2322  osd/OSD.cc <<enable_disable_fuse>>
             dout(1) << __func__ << " disabling" << dendl;
 128   2336  osd/OSD.cc <<enable_disable_fuse>>
             dout(1) << __func__ << " enabling" << dendl;
 129   2403  osd/OSD.cc <<init>>
             dout(2) << "init " << dev_path
 130   2406  osd/OSD.cc <<init>>
             dout(2) << "journal " << journal_path << dendl;
 131   2417  osd/OSD.cc <<init>>
             dout(2) << "journal looks like " << (journal_is_rotational ? "hdd" : "ssd")
 132   2422  osd/OSD.cc <<init>>
             dout(2) << "boot" << dendl;
 133   2458  osd/OSD.cc <<init>>
             dout(20) << "configured osd_max_object_name[space]_len looks ok" << dendl;
 134   2532  osd/OSD.cc <<init>>
             dout(5) << "Upgrading superblock adding: " << diff << dendl;
 135   2542  osd/OSD.cc <<init>>
             dout(10) << "init creating/touching snapmapper object" << dendl;
 136   2556  osd/OSD.cc <<init>>
             dout(1) << "warning: got an error loading one or more classes: " << cpp_strerror(r) << dendl;
 137   2579  osd/OSD.cc <<init>>
             dout(2) << "superblock: I am osd." << superblock.whoami << dendl;
 138   2580  osd/OSD.cc <<init>>
             dout(0) << "using " << op_queue << " op queue with priority op cut off at " <<
 139   2670  osd/OSD.cc <<init>>
             dout(10) << "ensuring pgs have consumed prior maps" << dendl;
 140   2673  osd/OSD.cc <<init>>
             dout(0) << "done with init, starting boot process" << dendl;
 141   2937  osd/OSD.cc <<create_logger>>
             dout(10) << "create_logger" << dendl;
 142   3215  osd/OSD.cc <<create_recoverystate_perf>>
             dout(10) << "create_recoverystate_perf" << dendl;
 143   3354  osd/OSD.cc <<shutdown>>
             dout(10) << "op sharded tp stopped" << dendl;
 144   3358  osd/OSD.cc <<shutdown>>
             dout(10) << "command tp stopped" << dendl;
 145   3360  osd/OSD.cc <<shutdown>>
             dout(10) << "stopping agent" << dendl;
 146   3375  osd/OSD.cc <<shutdown>>
             dout(10) << "noting clean unmount in epoch " << osdmap->get_epoch() << dendl;
 147   3403  osd/OSD.cc <<shutdown>>
             dout(20) << " kicking pg " << pg << dendl;
 148   3426  osd/OSD.cc <<shutdown>>
             dout(10) << "syncing store" << dendl;
 149   3430  osd/OSD.cc <<shutdown>>
             dout(10) << "flushing journal" << dendl;
 150   3437  osd/OSD.cc <<shutdown>>
             dout(10) << "Store synced" << dendl;
 151   3466  osd/OSD.cc <<mon_cmd_maybe_osd_create>>
             dout(10) << __func__ << " cmd: " << cmd << dendl;
 152   3503  osd/OSD.cc <<update_crush_location>>
             dout(10) << __func__ << " osd_crush_update_on_start = false" << dendl;
 153   3524  osd/OSD.cc <<update_crush_location>>
             dout(10) << __func__ << " crush location is " << loc << dendl;
 154   3544  osd/OSD.cc <<update_crush_device_class>>
             dout(10) << __func__ << " osd_class_update_on_start = false" << dendl;
 155   3555  osd/OSD.cc <<update_crush_device_class>>
             dout(20) << __func__ << " no device class stored locally" << dendl;
 156   3575  osd/OSD.cc <<write_superblock>>
             dout(10) << "write_superblock " << superblock << dendl;
 157   3596  osd/OSD.cc <<read_superblock>>
             dout(10) << "read_superblock " << superblock << dendl;
 158   3603  osd/OSD.cc <<clear_temp_objects>>
             dout(10) << __func__ << dendl;
 159   3612  osd/OSD.cc <<clear_temp_objects>>
             dout(20) << " clearing temps in " << *p << " pgid " << pgid << dendl;
 160   3643  osd/OSD.cc <<clear_temp_objects>>
             dout(20) << " removing " << *p << " object " << *q << dendl;
 161   3711  osd/OSD.cc <<_make_pg>>
             dout(10) << __func__ << " " << pgid << dendl;
 162   3792  osd/OSD.cc <<register_pg>>
             dout(20) << __func__ << " " << pgid << " " << pg << dendl;
 163   3804  osd/OSD.cc <<unregister_pg>>
             dout(20) << __func__ << " " << pg->pg_id << " " << pg << dendl;
 164   3807  osd/OSD.cc <<unregister_pg>>
             dout(20) << __func__ << " " << pg->pg_id << " not found" << dendl;
 165   3845  osd/OSD.cc <<load_pgs>>
             dout(0) << "load_pgs" << dendl;
 166   3860  osd/OSD.cc <<load_pgs>>
             dout(10) << "load_pgs " << *it << " clearing temp" << dendl;
 167   3866  osd/OSD.cc <<load_pgs>>
             dout(10) << "load_pgs ignoring unrecognized " << *it << dendl;
 168   3870  osd/OSD.cc <<load_pgs>>
             dout(10) << "pgid " << pgid << " coll " << coll_t(pgid) << dendl;
 169   3915  osd/OSD.cc <<load_pgs>>
             dout(10) << "load_pgs " << *it << " deleting dne" << dendl;
 170   3934  osd/OSD.cc <<load_pgs>>
             dout(10) << __func__ << " loaded " << *pg << dendl;
 171   3940  osd/OSD.cc <<load_pgs>>
             dout(0) << __func__ << " opened " << num << " pgs" << dendl;
 172   3950  osd/OSD.cc <<handle_pg_create_info>>
             dout(10) << __func__ << " hit max pg, dropping" << dendl;
 173   4002  osd/OSD.cc <<handle_pg_create_info>>
             dout(10) << __func__ << " new pg " << *pg << dendl;
 174   4025  osd/OSD.cc <<maybe_wait_for_max_pg>>
             dout(1) << __func__ << " withhold creation of pg " << pgid
 175   4058  osd/OSD.cc <<resume_creating_pg>>
             dout(20) << __func__ << " pending_creates_from_mon "
 176   4070  osd/OSD.cc <<resume_creating_pg>>
             dout(20) << __func__ << " pg " << pg->first << dendl;
 177   4085  osd/OSD.cc <<resume_creating_pg>>
             dout(4) << __func__ << ": resolicit pg creates from mon since "
 178   4094  osd/OSD.cc <<resume_creating_pg>>
             dout(4) << __func__ << ": resolicit osdmap from mon since "
 179   4102  osd/OSD.cc <<resume_creating_pg>>
             dout(4) << __func__ << ": re-subscribe osdmap(onetime) since "
 180   4122  osd/OSD.cc <<build_initial_pg_history>>
             dout(10) << __func__ << " " << pgid << " created " << created << dendl;
 181   4190  osd/OSD.cc <<build_initial_pg_history>>
             dout(20) << __func__ << " " << debug.str() << dendl;
 182   4191  osd/OSD.cc <<build_initial_pg_history>>
             dout(10) << __func__ << " " << *h << " " << *pi
 183   4312  osd/OSD.cc <<_add_heartbeat_peer>>
             dout(10) << "_add_heartbeat_peer: new peer osd." << p
 184   4318  osd/OSD.cc <<_add_heartbeat_peer>>
             dout(10) << "_add_heartbeat_peer: new peer osd." << p
 185   4333  osd/OSD.cc <<_remove_heartbeat_peer>>
             dout(20) << " removing heartbeat peer osd." << n
 186   4348  osd/OSD.cc <<need_heartbeat_peer_update>>
             dout(20) << "need_heartbeat_peer_update" << dendl;
 187   4364  osd/OSD.cc <<maybe_update_heartbeat_peers>>
             dout(10) << "maybe_update_heartbeat_peers forcing update after " << dur << " seconds" << dendl;
 188   4378  osd/OSD.cc <<maybe_update_heartbeat_peers>>
             dout(10) << "maybe_update_heartbeat_peers updating" << dendl;
 189   4404  osd/OSD.cc <<maybe_update_heartbeat_peers>>
             dout(10) << " adding neighbor peer osd." << *p << dendl;
 190   4429  osd/OSD.cc <<maybe_update_heartbeat_peers>>
             dout(10) << " adding random peer osd." << n << dendl;
 191   4447  osd/OSD.cc <<maybe_update_heartbeat_peers>>
             dout(10) << "maybe_update_heartbeat_peers " << h....size() << " peers, extras " << extras << dendl;
 192   4453  osd/OSD.cc <<reset_heartbeat_peers>>
             dout(10) << "reset_heartbeat_peers" << dendl;
 193   4469  osd/OSD.cc <<handle_osd_ping>>
             dout(20) << "handle_osd_ping from " << m->get_source_inst()
 194   4502  osd/OSD.cc <<handle_osd_ping>>
             dout(5) << "Dropping heartbeat from " << from
 195   4512  osd/OSD.cc <<handle_osd_ping>>
             dout(5) << "Dropping heartbeat from " << from
 196   4520  osd/OSD.cc <<handle_osd_ping>>
             dout(10) << "internal heartbeat not healthy, dropping ping request" << dendl;
 197   4556  osd/OSD.cc <<handle_osd_ping>>
             dout(25) << "handle_osd_ping got reply from osd." << from
 198   4567  osd/OSD.cc <<handle_osd_ping>>
             dout(25) << "handle_osd_ping got reply from osd." << from
 199   4582  osd/OSD.cc <<handle_osd_ping>>
             dout(10) << "handle_osd_ping canceling queued "
 200   4589  osd/OSD.cc <<handle_osd_ping>>
             dout(10) << "handle_osd_ping canceling in-flight "
 201   4612  osd/OSD.cc <<handle_osd_ping>>
             dout(10) << "handle_osd_ping " << m->get_source_inst()
 202   4633  osd/OSD.cc <<heartbeat_entry>>
             dout(30) << "heartbeat_entry sleeping for " << wait << dendl;
 203   4637  osd/OSD.cc <<heartbeat_entry>>
             dout(30) << "heartbeat_entry woke up" << dendl;
 204   4654  osd/OSD.cc <<heartbeat_check>>
             dout(25) << "heartbeat_check we haven't sent ping to osd." << p->first
 205   4659  osd/OSD.cc <<heartbeat_check>>
             dout(25) << "heartbeat_check osd." << p->first
 206   4687  osd/OSD.cc <<heartbeat>>
             dout(30) << "heartbeat" << dendl;
 207   4702  osd/OSD.cc <<heartbeat>>
             dout(30) << "heartbeat: daily_loadavg " << daily_loadavg << dendl;
 208   4705  osd/OSD.cc <<heartbeat>>
             dout(30) << "heartbeat checking stats" << dendl;
 209   4715  osd/OSD.cc <<heartbeat>>
             dout(5) << "heartbeat: " << service.get_osd_stat() << dendl;
 210   4727  osd/OSD.cc <<heartbeat>>
             dout(30) << "heartbeat sending ping to osd." << peer << dendl;
 211   4743  osd/OSD.cc <<heartbeat>>
             dout(30) << "heartbeat lonely?" << dendl;
 212   4747  osd/OSD.cc <<heartbeat>>
             dout(10) << "i have no heartbeat peers; checking mon for new map" << dendl;
 213   4752  osd/OSD.cc <<heartbeat>>
             dout(30) << "heartbeat done" << dendl;
 214   4769  osd/OSD.cc <<heartbeat_reset>>
             dout(10) << "heartbeat_reset failed hb con " << con << " for osd." << p->second.peer
 215   4788  osd/OSD.cc <<heartbeat_reset>>
             dout(10) << "heartbeat_reset failed hb con " << con << " for osd." << p->second.peer
 216   4793  osd/OSD.cc <<heartbeat_reset>>
             dout(10) << "heartbeat_reset closing (old) failed hb con " << con << dendl;
 217   4808  osd/OSD.cc <<tick>>
             dout(10) << "tick" << dendl;
 218   4826  osd/OSD.cc <<tick_without_osd_lock>>
             dout(10) << "tick_without_osd_lock" << dendl;
 219   4861  osd/OSD.cc <<tick_without_osd_lock>>
             dout(20) << __func__ << " max_waiting_epoch " << max_waiting_epoch
 220   5120  osd/OSD.cc <<ms_handle_connect>>
             dout(10) << __func__ << " con " << con << dendl;
 221   5125  osd/OSD.cc <<ms_handle_connect>>
             dout(10) << __func__ << " on mon" << dendl;
 222   5168  osd/OSD.cc <<ms_handle_fast_connect>>
             dout(10) << " new session (outgoing) " << s << " con=" << s->con
 223   5187  osd/OSD.cc <<ms_handle_fast_accept>>
             dout(10) << "new session (incoming)" << s << " con=" << con
 224   5200  osd/OSD.cc <<ms_handle_reset>>
             dout(2) << "ms_handle_reset con " << con << " session " << session << dendl;
 225   5219  osd/OSD.cc <<ms_handle_refused>>
             dout(2) << "ms_handle_refused con " << con << " session " << session << dendl;
 226   5258  osd/OSD.cc <<start_boot>>
             dout(1) << "not healthy; waiting to boot" << dendl;
 227   5265  osd/OSD.cc <<start_boot>>
             dout(1) << __func__ << dendl;
 228   5267  osd/OSD.cc <<start_boot>>
             dout(10) << "start_boot - have maps " << superblock.oldest_map
 229   5284  osd/OSD.cc <<_preboot>>
             dout(10) << __func__ << " _preboot mon has osdmaps "
 230   5338  osd/OSD.cc <<send_full_update>>
             dout(10) << __func__ << " want state " << s << dendl;
 231   5344  osd/OSD.cc <<start_waiting_for_healthy>>
             dout(1) << "start_waiting_for_healthy" << dendl;
 232   5355  osd/OSD.cc <<_is_healthy>>
             dout(1) << "is_healthy false -- internal heartbeat failed" << dendl;
 233   5372  osd/OSD.cc <<_is_healthy>>
             dout(1) << "is_healthy false -- only " << up << "/" << num << " up peers (less than "
 234   5383  osd/OSD.cc <<_send_boot>>
             dout(10) << "_send_boot" << dendl;
 235   5391  osd/OSD.cc <<_send_boot>>
             dout(10) << " assuming cluster_addr ip matches client_addr" << dendl;
 236   5407  osd/OSD.cc <<_send_boot>>
             dout(10) << " assuming hb_back_addr ip matches cluster_addr" << dendl;
 237   5423  osd/OSD.cc <<_send_boot>>
             dout(10) << " assuming hb_front_addr ip matches client_addr" << dendl;
 238   5435  osd/OSD.cc <<_send_boot>>
             dout(10) << " client_addr " << client_messenger->get_myaddr()
 239   5509  osd/OSD.cc <<queue_want_up_thru>>
             dout(10) << "queue_want_up_thru now " << want << " (was " << up_thru_wanted << ")"
 240   5515  osd/OSD.cc <<queue_want_up_thru>>
             dout(10) << "queue_want_up_thru want " << want << " <= queued " << up_thru_wanted
 241   5528  osd/OSD.cc <<send_alive>>
             dout(10) << "send_alive up_thru currently " << up_thru << " want " << up_thru_wanted << dendl;
 242   5530  osd/OSD.cc <<send_alive>>
             dout(10) << "send_alive want " << up_thru_wanted << dendl;
 243   5537  osd/OSD.cc <<request_full_map>>
             dout(10) << __func__ << " " << first << ".." << last
 244   5566  osd/OSD.cc <<got_full_map>>
             dout(20) << __func__ << " " << e << ", nothing requested" << dendl;
 245   5570  osd/OSD.cc <<got_full_map>>
             dout(10) << __func__ << " " << e << ", requested " << requested_full_first
 246   5576  osd/OSD.cc <<got_full_map>>
             dout(10) << __func__ << " " << e << ", requested " << requested_full_first
 247   5584  osd/OSD.cc <<got_full_map>>
             dout(10) << __func__ << " " << e << ", requested " << requested_full_first
 248   5600  osd/OSD.cc <<requeue_failures>>
             dout(10) << __func__ << " " << old_queue << " + " << old_pending << " -> "
 249   5637  osd/OSD.cc <<send_beacon>>
             dout(20) << __func__ << " sending" << dendl;
 250   5647  osd/OSD.cc <<send_beacon>>
             dout(20) << __func__ << " not sending" << dendl;
 251   6266  osd/OSD.cc <<probe_smart>>
             dout(10) << "probe_smart_device failed for /dev/" << dev << dendl;
 252   6307  osd/OSD.cc <<probe_smart_device>>
             dout(10) << "smartctl output is: " << *result << dendl;
 253   6320  osd/OSD.cc <<heartbeat_dispatch>>
             dout(30) << "heartbeat_dispatch " << m << dendl;
 254   6324  osd/OSD.cc <<heartbeat_dispatch>>
             dout(10) << "ping from " << m->get_source_inst() << dendl;
 255   6333  osd/OSD.cc <<heartbeat_dispatch>>
             dout(0) << "dropping unexpected message " << *m << " from " << m->get_source_inst() << dendl;
 256   6342  osd/OSD.cc <<ms_dispatch>>
             dout(20) << "OSD::ms_dispatch: " << *m << dendl;
 257   6444  osd/OSD.cc <<ms_fast_dispatch>>
             dout(10) << "ping from " << m->get_source() << dendl;
 258   6549  osd/OSD.cc <<ms_get_authorizer>>
             dout(10) << "OSD::ms_get_authorizer type=" << ceph_entity_type_name(dest_type) << dendl;
 259   6552  osd/OSD.cc <<ms_get_authorizer>>
             dout(10) << __func__ << " bailing, we are shutting down" << dendl;
 260   6592  osd/OSD.cc <<ms_verify_authorizer>>
             dout(0) << "No AuthAuthorizeHandler found for protocol " << protocol << dendl;
 261   6609  osd/OSD.cc <<ms_verify_authorizer>>
             dout(10) << __func__ << " no rotating_keys (yet), denied" << dendl;
 262   6619  osd/OSD.cc <<ms_verify_authorizer>>
             dout(10) << " new session " << s << " con=" << s...<< " addr=" << s->con->get_peer_addr() << dendl;
 263   6639  osd/OSD.cc <<ms_verify_authorizer>>
             dout(10) << " session " << s << " " << s->entity...aps " << s->caps << " '" << str << "'" << dendl;
 264   6641  osd/OSD.cc <<ms_verify_authorizer>>
             dout(10) << " session " << s << " " << s->entity... failed to parse caps '" << str << "'" << dendl;
 265   6642  osd/OSD.cc <<ms_verify_authorizer>>
             dout(20) << "parser returned " << ss.str() << dendl;
 266   6656  osd/OSD.cc <<do_waiters>>
             dout(10) << "do_waiters -- start" << dendl;
 267   6662  osd/OSD.cc <<do_waiters>>
             dout(10) << "do_waiters -- finish" << dendl;
 268   6678  osd/OSD.cc <<_dispatch>>
             dout(20) << "_dispatch " << m << " " << *m << dendl;
 269   6706  osd/OSD.cc <<_dispatch>>
             dout(7) << "no OSDMap, not booted" << dendl;
 270   6722  osd/OSD.cc <<handle_scrub>>
             dout(10) << "handle_scrub " << *m << dendl;
 271   6728  osd/OSD.cc <<handle_scrub>>
             dout(0) << "handle_scrub fsid " << m->fsid << " != " << monc->get_fsid()
 272   6764  osd/OSD.cc <<handle_fast_scrub>>
             dout(10) << __func__ << " " << *m << dendl;
 273   6770  osd/OSD.cc <<handle_fast_scrub>>
             dout(0) << __func__ << " fsid " << m->fsid << " != " << monc->get_fsid()
 274   6792  osd/OSD.cc <<scrub_random_backoff>>
             dout(20) << "scrub_random_backoff lost coin flip, randomly backing off" << dendl;
 275   6853  osd/OSD.cc <<scrub_time_permit>>
             dout(20) << __func__ << " should run between week day " << cct->_conf->osd_scrub_begin_week_day
 276   6870  osd/OSD.cc <<scrub_time_permit>>
             dout(20) << __func__ << " should run between " << cct->_conf->osd_scrub_begin_hour
 277   6874  osd/OSD.cc <<scrub_time_permit>>
             dout(20) << __func__ << " should run between " << cct->_conf->osd_scrub_begin_hour
 278   6885  osd/OSD.cc <<scrub_load_below_threshold>>
             dout(10) << __func__ << " couldn't read loadavgs\n" << dendl;
 279   6893  osd/OSD.cc <<scrub_load_below_threshold>>
             dout(20) << __func__ << " loadavg per cpu " << loadavg_per_cpu
 280   6901  osd/OSD.cc <<scrub_load_below_threshold>>
             dout(20) << __func__ << " loadavg " << loadavgs[0]
 281   6908  osd/OSD.cc <<scrub_load_below_threshold>>
             dout(20) << __func__ << " loadavg " << loadavgs[0]
 282   6923  osd/OSD.cc <<sched_scrub>>
             dout(20) << __func__ << " not scheduling scrubs due to active recovery" << dendl;
 283   6931  osd/OSD.cc <<sched_scrub>>
             dout(20) << "sched_scrub load_is_low=" << (int )load_is_low << dendl;
 284   6936  osd/OSD.cc <<sched_scrub>>
             dout(30) << "sched_scrub examine " << scrub.pgid << " at " << scrub.sched_time << dendl;
 285   6940  osd/OSD.cc <<sched_scrub>>
             dout(10) << "sched_scrub " << scrub.pgid << " scheduled at " << scrub.sched_time
 286   6946  osd/OSD.cc <<sched_scrub>>
             dout(10) << __func__ << " not scheduling scrub for " << scrub.pgid << " due to "
 287   6954  osd/OSD.cc <<sched_scrub>>
             dout(10) << "sched_scrub scrubbing " << scrub.pgid << " at " << scrub.sched_time
 288   6965  osd/OSD.cc <<sched_scrub>>
             dout(20) << "sched_scrub done" << dendl;
 289   7129  osd/OSD.cc <<trim_maps>>
             dout(20) << " removing old osdmap epoch " << e << dendl;
 290   7172  osd/OSD.cc <<handle_osd_map>>
             dout(0) << "handle_osd_map fsid " << m->fsid << " != "
 291   7178  osd/OSD.cc <<handle_osd_map>>
             dout(0) << "ignoring osdmap until we have initialized" << dendl;
 292   7187  osd/OSD.cc <<handle_osd_map>>
             dout(10) << "got osd map from Session " << session
 293   7202  osd/OSD.cc <<handle_osd_map>>
             dout(3) << "handle_osd_map epochs [" << first << "," << last << "], i have "
 294   7219  osd/OSD.cc <<handle_osd_map>>
             dout(10) << " no new maps here, dropping" << dendl;
 295   7227  osd/OSD.cc <<handle_osd_map>>
             dout(10) << "handle_osd_map message skips epochs "
 296   7260  osd/OSD.cc <<handle_osd_map>>
             dout(10) << __func__ << " waiting for pgs to consume " << need
 297   7285  osd/OSD.cc <<handle_osd_map>>
             dout(10) << "handle_osd_map got full map for epoch " << e << dendl;
 298   7301  osd/OSD.cc <<handle_osd_map>>
             dout(10) << "handle_osd_map got inc map for epoch " << e << dendl;
 299   7337  osd/OSD.cc <<handle_osd_map>>
             dout(2) << "got incremental " << e
 300   7341  osd/OSD.cc <<handle_osd_map>>
             dout(20) << "my encoded map was:\n";
 301   7365  osd/OSD.cc <<handle_osd_map>>
             dout(10) << __func__ << " still missing full maps " << requested_full_first
 302   7396  osd/OSD.cc <<handle_osd_map>>
             dout(10) << __func__ << " recording final pg_pool_t for pool "
 303   7429  osd/OSD.cc <<_committed_osd_maps>>
             dout(10) << __func__ << " " << first << ".." << last << dendl;
 304   7431  osd/OSD.cc <<_committed_osd_maps>>
             dout(10) << __func__ << " bailing, we are shutting down" << dendl;
 305   7436  osd/OSD.cc <<_committed_osd_maps>>
             dout(10) << __func__ << " bailing, we are shutting down" << dendl;
 306   7447  osd/OSD.cc <<_committed_osd_maps>>
             dout(10) << " advance to epoch " << cur
 307   7481  osd/OSD.cc <<_committed_osd_maps>>
             dout(10) << __func__ << " NOUP flag changed in " << newmap->get_epoch()
 308   7502  osd/OSD.cc <<_committed_osd_maps>>
             dout(10) << "up_epoch is " << up_epoch << dendl;
 309   7505  osd/OSD.cc <<_committed_osd_maps>>
             dout(10) << "boot_epoch is " << boot_epoch << dendl;
 310   7519  osd/OSD.cc <<_committed_osd_maps>>
             dout(1) << "state: booting -> active" << dendl;
 311   7532  osd/OSD.cc <<_committed_osd_maps>>
             dout(0) << "map says i do not exist. shutting down." << dendl;
 312   7598  osd/OSD.cc <<_committed_osd_maps>>
             dout(0) << __func__ << " marked down "
 313   7625  osd/OSD.cc <<_committed_osd_maps>>
             dout(0) << __func__ << " marked down:"
 314   7633  osd/OSD.cc <<_committed_osd_maps>>
             dout(0) << __func__ << " marked down:"
 315   7641  osd/OSD.cc <<_committed_osd_maps>>
             dout(0) << __func__ << " marked down:"
 316   7664  osd/OSD.cc <<_committed_osd_maps>>
             dout(10) << " not yet active; waiting for peering work to drain" << dendl;
 317   7678  osd/OSD.cc <<_committed_osd_maps>>
             dout(10) << "handle_osd_ping canceling in-flight failure report for osd."
 318   7685  osd/OSD.cc <<_committed_osd_maps>>
             dout(0) << __func__ << " shutdown OSD via async signal" << dendl;
 319   7689  osd/OSD.cc <<_committed_osd_maps>>
             dout(10) << " msg say newest map is " << m->newest_map
 320   7720  osd/OSD.cc <<check_osdmap_features>>
             dout(0) << "crush map has features " << features
 321   7731  osd/OSD.cc <<check_osdmap_features>>
             dout(0) << "crush map has features " << features
 322   7744  osd/OSD.cc <<check_osdmap_features>>
             dout(0) << "crush map has features " << features
 323   7751  osd/OSD.cc <<check_osdmap_features>>
             dout(0) << __func__ << " enabling on-disk ERASURE CODES compat feature" << dendl;
 324   7812  osd/OSD.cc <<advance_pg>>
             dout(20) << __func__ << " missing map " << next_epoch << dendl;
 325   7852  osd/OSD.cc <<consume_map>>
             dout(7) << "consume_map version " << osdmap->get_epoch() << dendl;
 326   7943  osd/OSD.cc <<activate_map>>
             dout(7) << "activate_map version " << osdmap->get_epoch() << dendl;
 327   7946  osd/OSD.cc <<activate_map>>
             dout(10) << " osdmap flagged full, doing onetime osdmap subscribe" << dendl;
 328   7953  osd/OSD.cc <<activate_map>>
             dout(1) << "pausing recovery (NORECOVER flag set)" << dendl;
 329   7958  osd/OSD.cc <<activate_map>>
             dout(1) << "unpausing recovery (NORECOVER flag unset)" << dendl;
 330   7972  osd/OSD.cc <<require_mon_peer>>
             dout(0) << "require_mon_peer received from non-mon "
 331   7984  osd/OSD.cc <<require_mon_or_mgr_peer>>
             dout(0) << "require_mon_or_mgr_peer received from non-mon, non-mgr "
 332   7995  osd/OSD.cc <<require_osd_peer>>
             dout(0) << "require_osd_peer received from non-osd "
 333   8007  osd/OSD.cc <<require_self_aliveness>>
             dout(7) << "from pre-up epoch " << epoch << " < " << up_epoch << dendl;
 334   8012  osd/OSD.cc <<require_self_aliveness>>
             dout(7) << "still in boot state, dropping message " << *m << dendl;
 335   8026  osd/OSD.cc <<require_same_peer_instance>>
             dout(5) << "from dead osd." << from << ", marking down, "
 336   8057  osd/OSD.cc <<require_same_or_newer_map>>
             dout(15) << "require_same_or_newer_map " << epoch
 337   8064  osd/OSD.cc <<require_same_or_newer_map>>
             dout(7) << "waiting for newer map epoch " << epoch
 338   8144  osd/OSD.cc <<handle_pg_create>>
             dout(10) << "handle_pg_create " << *m << dendl;
 339   8166  osd/OSD.cc <<handle_pg_create>>
             dout(20) << "ignoring pg on deleted pool " << on << dendl;
 340   8170  osd/OSD.cc <<handle_pg_create>>
             dout(20) << "mkpg " << on << " e" << created << "@" << ci->second << dendl;
 341   8180  osd/OSD.cc <<handle_pg_create>>
             dout(10) << "mkpg " << on << " not acting_primary (" << acting_primary
 342   8197  osd/OSD.cc <<handle_pg_create>>
             dout(10) << __func__ << ": got obsolete pg create on pgid "
 343   8263  osd/OSD.cc <<dispatch_context>>
             dout(20) << __func__ << " not up in osdmap" << dendl;
 344   8265  osd/OSD.cc <<dispatch_context>>
             dout(20) << __func__ << " not active" << dendl;
 345   8393  osd/OSD.cc <<handle_fast_pg_create>>
             dout(7) << __func__ << " " << *m << " from " << m->get_source() << dendl;
 346   8402  osd/OSD.cc <<handle_fast_pg_create>>
             dout(20) << __func__ << " " << pgid << " e" << created
 347   8443  osd/OSD.cc <<handle_fast_pg_query>>
             dout(7) << __func__ << " " << *m << " from " << m->get_source() << dendl;
 348   8468  osd/OSD.cc <<handle_fast_pg_notify>>
             dout(7) << __func__ << " " << *m << " from " << m->get_source() << dendl;
 349   8501  osd/OSD.cc <<handle_fast_pg_info>>
             dout(7) << __func__ << " " << *m << " from " << m->get_source() << dendl;
 350   8524  osd/OSD.cc <<handle_fast_pg_remove>>
             dout(7) << __func__ << " " << *m << " from " << m->get_source() << dendl;
 351   8542  osd/OSD.cc <<handle_fast_force_recovery>>
             dout(10) << __func__ << " " << *m << dendl;
 352   8589  osd/OSD.cc <<handle_pg_query_nopg>>
             dout(10) << __func__ << " " << pgid << dendl;
 353   8609  osd/OSD.cc <<handle_pg_query_nopg>>
             dout(10) << " pg " << pgid << " dne, and pg has changed in "
 354   8615  osd/OSD.cc <<handle_pg_query_nopg>>
             dout(10) << " pg " << pgid << " dne" << dendl;
 355   8657  osd/OSD.cc <<_maybe_queue_recovery>>
             dout(10) << __func__ << " starting " << to_start
 356   8670  osd/OSD.cc <<_recover_now>>
             dout(15) << __func__ << " defer until " << defer_recovery_until << dendl;
 357   8675  osd/OSD.cc <<_recover_now>>
             dout(15) << __func__ << " paused" << dendl;
 358   8681  osd/OSD.cc <<_recover_now>>
             dout(15) << __func__ << " active " << recovery_ops_active
 359   8712  osd/OSD.cc <<do_recovery>>
             dout(20) << "do_recovery wake up at "
 360   8729  osd/OSD.cc <<do_recovery>>
             dout(20) << "Recovery event scheduled at "
 361   8745  osd/OSD.cc <<do_recovery>>
             dout(10) << "do_recovery starting " << reserved_pushes << " " << *pg << dendl;
 362   8747  osd/OSD.cc <<do_recovery>>
             dout(20) << " active was " << service.recovery_oids[pg->pg_id] << dendl;
 363   8751  osd/OSD.cc <<do_recovery>>
             dout(10) << "do_recovery started " << started << "/" << reserved_pushes
 364   8770  osd/OSD.cc <<start_recovery_op>>
             dout(10) << "start_recovery_op " << *pg << " " << soid
 365   8777  osd/OSD.cc <<start_recovery_op>>
             dout(20) << " active was " << recovery_oids[pg->pg_id] << dendl;
 366   8786  osd/OSD.cc <<finish_recovery_op>>
             dout(10) << "finish_recovery_op " << *pg << " " << soid
 367   8796  osd/OSD.cc <<finish_recovery_op>>
             dout(20) << " active oids was " << recovery_oids[pg->pg_id] << dendl;
 368   8812  osd/OSD.cc <<release_reserved_pushes>>
             dout(10) << __func__ << "(" << pushes << "), recovery_ops_reserved "
 369   8836  osd/OSD.cc <<enqueue_op>>
             dout(15) << "enqueue_op " << op << " prio " << op->get_req()->get_priority()
 370   8858  osd/OSD.cc <<enqueue_peering_evt>>
             dout(15) << __func__ << " " << pgid << " " << evt->get_desc() << dendl;
 371   8871  osd/OSD.cc <<enqueue_peering_evt_front>>
             dout(15) << __func__ << " " << pgid << " " << evt->get_desc() << dendl;
 372   8895  osd/OSD.cc <<dequeue_op>>
             dout(10) << "dequeue_op " << op << " prio " << op->get_req()->get_priority()
 373   8919  osd/OSD.cc <<dequeue_op>>
             dout(10) << "dequeue_op " << op << " finish" << dendl;
 374   9143  osd/OSD.cc <<get_latest_osdmap>>
             dout(10) << __func__ << " -- start" << dendl;
 375   9149  osd/OSD.cc <<get_latest_osdmap>>
             dout(10) << __func__ << " -- finish" << dendl;
 376   9260  osd/OSD.cc <<init_op_flags>>
             dout(10) << "class " << cname << " method " << mname << " "
 377   9350  osd/OSD.cc <<_attach_pg>>
             dout(10) << pg->pg_id << " " << pg << dendl;
 378   9362  osd/OSD.cc <<_detach_pg>>
             dout(10) << slot->pg->pg_id << " " << slot->pg << dendl;
 379   9378  osd/OSD.cc <<update_pg_epoch>>
             dout(30) << "min was " << pg_slots_by_epoch.begin()->epoch
 380   9381  osd/OSD.cc <<update_pg_epoch>>
             dout(20) << slot->pg->pg_id << " " << slot->epoch << " -> " << e << dendl;
 381   9384  osd/OSD.cc <<update_pg_epoch>>
             dout(30) << "min is now " << pg_slots_by_epoch.begin()->epoch
 382   9407  osd/OSD.cc <<wait_min_pg_epoch>>
             dout(10) << need << " waiting on "
 383   9437  osd/OSD.cc <<consume_map>>
             dout(10) << new_osdmap->get_epoch()
 384   9447  osd/OSD.cc <<consume_map>>
             dout(20) << __func__ << " " << pgid << dendl;
 385   9449  osd/OSD.cc <<consume_map>>
             dout(20) << __func__ << " " << pgid
 386   9457  osd/OSD.cc <<consume_map>>
             dout(20) << __func__ << " " << pgid
 387   9468  osd/OSD.cc <<consume_map>>
             dout(20) << __func__ << " " << pgid << " maps to us, keeping"
 388   9476  osd/OSD.cc <<consume_map>>
             dout(20) << __func__ << " " << pgid
 389   9491  osd/OSD.cc <<consume_map>>
             dout(20) << __func__ << " " << pgid << " empty, pruning" << dendl;
 390   9509  osd/OSD.cc <<_wake_pg_slot>>
             dout(20) << __func__ << " " << pgid
 391   9617  osd/OSD.cc <<register_and_wake_split_child>>
             dout(10) << pg->pg_id << " " << pg << dendl;
 392   9638  osd/OSD.cc <<unprime_split_children>>
             dout(10) << __func__ << " parent " << parent << " clearing " << i.first
 393   9661  osd/OSD.cc <<_add_slot_waiter>>
             dout(20) << __func__ << " " << pgid
 394   9667  osd/OSD.cc <<_add_slot_waiter>>
             dout(20) << __func__ << " " << pgid
 395   9688  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " empty q, waiting" << dendl;
 396   9701  osd/OSD.cc <<_process>>
             dout(0) << __func__ << " need return immediately" << dendl;
 397   9718  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " " << token
 398   9725  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " " << slot->to_process.back()
 399   9746  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " slot " << token << " no longer there" << dendl;
 400   9756  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " " << token
 401   9763  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " " << token
 402   9773  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " slot " << token << " no longer attached to "
 403   9780  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " " << token
 404   9791  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " " << qi << " pg " << pg << dendl;
 405   9800  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " " << token
 406   9804  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " " << token
 407   9817  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " " << token
 408   9821  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " " << token
 409   9836  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " ignored create on " << qi << dendl;
 410   9839  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " " << token
 411   9843  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " " << token
 412   9849  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " " << token
 413   9854  osd/OSD.cc <<_process>>
             dout(20) << __func__ << " " << token
 414   9940  osd/OSD.cc <<_enqueue>>
             dout(20) << __func__ << " " << item << dendl;
 415   9971  osd/OSD.cc <<_enqueue_front>>
             dout(20) << __func__
 416   9975  osd/OSD.cc <<_enqueue_front>>
             dout(20) << __func__ << " " << item << dendl;
 417    188  osd/PG.cc <<get_with_id>>
             dout(20) << __func__ << ": " << info.pgid << " got id " << id << " (new) ref==" << ref << dendl;
 418    196  osd/PG.cc <<put_with_id>>
             dout(20) << __func__ << ": " << info.pgid << " put id " << id << " (current) ref==" << ref << dendl; 419    209  osd/PG.cc <<dump_live_ids>>
             dout(0) << "\t" << __func__ << ": " << info.pgid << " live ids:" << dendl;
 420    213  osd/PG.cc <<dump_live_ids>>
             dout(0) << "\t\tid: " << *i << dendl;
 421    215  osd/PG.cc <<dump_live_ids>>
             dout(0) << "\t" << __func__ << ": " << info.pgid << " live tags:" << dendl;
 422    219  osd/PG.cc <<dump_live_ids>>
             dout(0) << "\t\tid: " << *i << dendl;
 423    383  osd/PG.cc <<lock>>
             dout(30) << "lock" << dendl;
 424    407  osd/PG.cc <<proc_master_log>>
             dout(10) << "proc_master_log for osd." << from << ": "
 425    417  osd/PG.cc <<proc_master_log>>
             dout(10) << " peer osd." << from << " now " << oinfo << " " << omissing << dendl;
 426    442  osd/PG.cc <<proc_replica_log>>
             dout(10) << "proc_replica_log for osd." << from << ": "
 427    448  osd/PG.cc <<proc_replica_log>>
             dout(10) << " peer osd." << from << " now " << oinfo << " " << omissing << dendl;
 428    455  osd/PG.cc <<proc_replica_log>>
             dout(20) << " after missing " << i->first << " need " << i->second.need
 429    466  osd/PG.cc <<proc_replica_info>>
             dout(10) << " got dup osd." << from << " info " << oinfo << ", identical to ours" << dendl;
 430    471  osd/PG.cc <<proc_replica_info>>
             dout(10) << " got info " << oinfo << " from down osd." << from
 431    476  osd/PG.cc <<proc_replica_info>>
             dout(10) << " got osd." << from << " " << oinfo << dendl;
 432    485  osd/PG.cc <<proc_replica_info>>
             dout(10) << " osd." << from << " has stray content: " << oinfo << dendl;
 433    845  osd/PG.cc <<needs_recovery>>
             dout(10) << __func__ << " primary has " << missing.num_missing()
 434    858  osd/PG.cc <<needs_recovery>>
             dout(10) << __func__ << " osd." << peer << " doesn't have missing set"
 435    863  osd/PG.cc <<needs_recovery>>
             dout(10) << __func__ << " osd." << peer << " has "
 436    869  osd/PG.cc <<needs_recovery>>
             dout(10) << __func__ << " is recovered" << dendl;
 437    885  osd/PG.cc <<needs_backfill>>
             dout(10) << __func__ << " osd." << peer << " has...backfill " << pi->second.last_backfill << dendl;
 438    890  osd/PG.cc <<needs_backfill>>
             dout(10) << __func__ << " does not need backfill" << dendl;
 439    947  osd/PG.cc <<adjust_need_up_thru>>
             dout(10) << "adjust_need_up_thru now " << up_thru << ", need_up_thru now false" << dendl;
 440    961  osd/PG.cc <<remove_down_peer_info>>
             dout(10) << " dropping down osd." << p->first << " info " << p->second << dendl;
 441   1002  osd/PG.cc <<all_unfound_are_queried_or_lost>>
             dout(10) << "all_unfound_are_queried_or_lost all of might_have_unfound " << might_have_unfound
 442   1050  osd/PG.cc <<build_prior>>
             dout(10) << "up_thru " << get_osdmap()->get_up_thru(osd->whoami)
 443   1055  osd/PG.cc <<build_prior>>
             dout(10) << "up_thru " << get_osdmap()->get_up_thru(osd->whoami)
 444   1066  osd/PG.cc <<clear_primary_state>>
             dout(10) << "clear_primary_state" << dendl;
 445   1617  osd/PG.cc <<choose_acting>>
             dout(10) << __func__ << " all_info osd." << p->first << " " << p->second << dendl;
 446   1626  osd/PG.cc <<choose_acting>>
             dout(10) << __func__ << " no suitable info found (incomplete backfills?),"
 447   1632  osd/PG.cc <<choose_acting>>
             dout(10) << __func__ << " failed" << dendl;
 448   1669  osd/PG.cc <<choose_acting>>
             dout(10) << ss.str() << dendl;
 449   1685  osd/PG.cc <<choose_acting>>
             dout(10) << __func__ << " want " << want << " != acting " << acting
 450   1701  osd/PG.cc <<choose_acting>>
             dout(10) << "acting_recovery_backfill is " << acting_recovery_backfill << dendl;
 451   1719  osd/PG.cc <<choose_acting>>
             dout(10) << "choose_acting want=" << want << " backfill_targets="
 452   1738  osd/PG.cc <<build_might_have_unfound>>
             dout(10) << __func__ << dendl;
 453   1752  osd/PG.cc <<build_might_have_unfound>>
             dout(15) << __func__ << ": built " << might_have_unfound << dendl;
 454   2096  osd/PG.cc <<op_has_sufficient_caps>>
             dout(0) << "op_has_sufficient_caps: no session for op " << *req << dendl;
 455   2114  osd/PG.cc <<op_has_sufficient_caps>>
             dout(20) << "op_has_sufficient_caps "
 456   2132  osd/PG.cc <<_activate_committed>>
             dout(10) << "_activate_committed " << epoch
 457   2137  osd/PG.cc <<_activate_committed>>
             dout(10) << "_activate_committed " << epoch
 458   2146  osd/PG.cc <<_activate_committed>>
             dout(10) << "_activate_committed " << epoch << " telling primary" << dendl;
 459   2169  osd/PG.cc <<_activate_committed>>
             dout(10) << __func__ << " flushes in progress, moving "
 460   2189  osd/PG.cc <<all_activated_and_committed>>
             dout(10) << "all_activated_and_committed" << dendl;
 461   2215  osd/PG.cc <<requeue_scrub>>
             dout(10) << __func__ << ": already queued" << dendl;
 462   2218  osd/PG.cc <<requeue_scrub>>
             dout(10) << __func__ << ": queueing" << dendl;
 463   2228  osd/PG.cc <<queue_recovery>>
             dout(10) << "queue_recovery -- not primary or not peered " << dendl;
 464   2231  osd/PG.cc <<queue_recovery>>
             dout(10) << "queue_recovery -- already queued" << dendl;
 465   2233  osd/PG.cc <<queue_recovery>>
             dout(10) << "queue_recovery -- queuing" << dendl;
 466   2292  osd/PG.cc <<set_force_recovery>>
             dout(20) << __func__ << " set" << dendl;
 467   2298  osd/PG.cc <<set_force_recovery>>
             dout(20) << __func__ << " clear" << dendl;
 468   2314  osd/PG.cc <<set_force_backfill>>
             dout(10) << __func__ << " set" << dendl;
 469   2320  osd/PG.cc <<set_force_backfill>>
             dout(10) << __func__ << " clear" << dendl;
 470   2354  osd/PG.cc <<get_recovery_priority>>
             dout(20) << __func__ << " recovery priority for ... is " << ret << ", state is " << state << dendl;
 471   2404  osd/PG.cc <<finish_recovery>>
             dout(10) << "finish_recovery" << dendl;
 472   2424  osd/PG.cc <<_finish_recovery>>
             dout(10) << "_finish_recovery" << dendl;
 473   2431  osd/PG.cc <<_finish_recovery>>
             dout(10) << "_finish_recovery requeueing for scrub" << dendl;
 474   2437  osd/PG.cc <<_finish_recovery>>
             dout(10) << "_finish_recovery -- stale" << dendl;
 475   2444  osd/PG.cc <<start_recovery_op>>
             dout(10) << "start_recovery_op " << soid
 476   2459  osd/PG.cc <<finish_recovery_op>>
             dout(10) << "finish_recovery_op " << soid
 477   2598  osd/PG.cc <<add_backoff>>
             dout(10) << __func__ << " session " << s << " added " << *b << dendl;
 478   2612  osd/PG.cc <<release_backoffs>>
             dout(10) << __func__ << " [" << begin << "," << end << ")" << dendl;
 479   2619  osd/PG.cc <<release_backoffs>>
             dout(20) << __func__ << " ? " << r << " " << p->first
 480   2625  osd/PG.cc <<release_backoffs>>
             dout(20) << __func__ << " checking " << p->first
 481   2629  osd/PG.cc <<release_backoffs>>
             dout(20) << __func__ << " checking " << *q << dendl;
 482   2647  osd/PG.cc <<release_backoffs>>
             dout(10) << __func__ << " " << *b << dendl;
 483   2674  osd/PG.cc <<clear_backoffs>>
             dout(10) << __func__ << " " << dendl;
 484   2683  osd/PG.cc <<clear_backoffs>>
             dout(10) << __func__ << " " << *b << dendl;
 485   2701  osd/PG.cc <<rm_backoff>>
             dout(10) << __func__ << " " << *b << dendl;
 486   2720  osd/PG.cc <<clear_recovery_state>>
             dout(10) << "clear_recovery_state" << dendl;
 487   2743  osd/PG.cc <<cancel_recovery>>
             dout(10) << "cancel_recovery" << dendl;
 488   2750  osd/PG.cc <<purge_strays>>
             dout(10) << "purge_strays " << stray_set << dendl;
 489   2758  osd/PG.cc <<purge_strays>>
             dout(10) << "sending PGRemove to osd." << *p << dendl;
 490   2766  osd/PG.cc <<purge_strays>>
             dout(10) << "not sending PGRemove to down osd." << *p << dendl;
 491   2827  osd/PG.cc <<update_heartbeat_peers>>
             dout(10) << "update_heartbeat_peers " << heartbeat_peers << " unchanged" << dendl;
 492   2829  osd/PG.cc <<update_heartbeat_peers>>
             dout(10) << "update_heartbeat_peers " << heartbeat_peers << " -> " << new_peers << dendl;
 493   2901  osd/PG.cc <<_update_calc_stats>>
             dout(20) << __func__ << " actingset " << actingset << " upset "
 494   2903  osd/PG.cc <<_update_calc_stats>>
             dout(20) << __func__ << " acting " << acting << " up " << up << dendl;
 495   2932  osd/PG.cc <<_update_calc_stats>>
             dout(20) << __func__ << " shard " << pg_whoami
 496   2952  osd/PG.cc <<_update_calc_stats>>
             dout(20) << __func__ << " no peer_missing found for " << peer.first << dendl;
 497   2965  osd/PG.cc <<_update_calc_stats>>
             dout(20) << __func__ << " shard " << peer.first
 498   2981  osd/PG.cc <<_update_calc_stats>>
             dout(0) << __func__ << " ml " << ml.second << " ... upset.size() << " up " << ml.first.up << dendl;
 499   2988  osd/PG.cc <<_update_calc_stats>>
             dout(0) << __func__ << " shard " << sml.first <<...< " missing shards " << missing_shards << dendl;
 500   3002  osd/PG.cc <<_update_calc_stats>>
             dout(20) << __func__ << " missing based degraded " << degraded << dendl;
 501   3003  osd/PG.cc <<_update_calc_stats>>
             dout(20) << __func__ << " missing based misplaced " << misplaced << dendl;
 502   3061  osd/PG.cc <<_update_calc_stats>>
             dout(20) << __func__ << " missing shard " << std...) << " missing= " << std::get<0>(item) << dendl;
 503   3063  osd/PG.cc <<_update_calc_stats>>
             dout(20) << __func__ << " acting shard " << std:...) << " missing= " << std::get<0>(item) << dendl;
 504   3105  osd/PG.cc <<_update_calc_stats>>
             dout(20) << __func__ << " extra acting misplaced " << extra_misplaced << dendl;
 505   3110  osd/PG.cc <<_update_calc_stats>>
             dout(20) << __func__ << " degraded " << degraded << (estimate ? " (est)": "") << dendl;
 506   3111  osd/PG.cc <<_update_calc_stats>>
             dout(20) << __func__ << " misplaced " << misplaced << (estimate ? " (est)": "")<< dendl;
 507   3198  osd/PG.cc <<publish_stats_to_osd>>
             dout(20) << __func__ << " reporting purged_snaps "
 508   3204  osd/PG.cc <<publish_stats_to_osd>>
             dout(15) << "publish_stats_to_osd " << pg_stats_publish.reported_epoch
 509   3228  osd/PG.cc <<publish_stats_to_osd>>
             dout(15) << "publish_stats_to_osd " << pg_stats_publish.reported_epoch
 510   3236  osd/PG.cc <<clear_publish_stats>>
             dout(15) << "clear_stats" << dendl;
 511   3316  osd/PG.cc <<upgrade>>
             dout(0) << __func__ << " " << info_struct_v << " -> " << latest_struct_v
 512   3553  osd/PG.cc <<trim_log>>
             dout(10) << __func__ << " to " << pg_trim_to << dendl;
 513   3593  osd/PG.cc <<add_log_entry>>
             dout(10) << "add_log_entry " << e << dendl;
 514   3678  osd/PG.cc <<get_corrupt_pg_log_name>>
             dout(0) << "strftime failed" << dendl;
 515   3907  osd/PG.cc <<requeue_op>>
             dout(20) << __func__ << " " << op << " (waiting_for_map " << p->first << ")"
 516   3911  osd/PG.cc <<requeue_op>>
             dout(20) << __func__ << " " << op << dendl;
 517   3939  osd/PG.cc <<requeue_map_waiters>>
             dout(20) << __func__ << " " << p->first << " front op "
 518   3944  osd/PG.cc <<requeue_map_waiters>>
             dout(20) << __func__ << " " << p->first << " " << p->second << dendl;
 519   4006  osd/PG.cc <<sched_scrub>>
             dout(20) << __func__ << ": time_for_deep=" << ti...< " deep_coin_flip=" << deep_coin_flip << dendl;
 520   4041  osd/PG.cc <<sched_scrub>>
             dout(20) << __func__ << ": auto repair with deep scrubbing" << dendl;
 521   4054  osd/PG.cc <<sched_scrub>>
             dout(20) << __func__ << ": reserved locally, reserving replicas" << dendl;
 522   4059  osd/PG.cc <<sched_scrub>>
             dout(20) << __func__ << ": failed to reserve locally" << dendl;
 523   4065  osd/PG.cc <<sched_scrub>>
             dout(20) << "sched_scrub: failed, a peer declined" << dendl;
 524   4070  osd/PG.cc <<sched_scrub>>
             dout(20) << "sched_scrub: success, reserved self and replicas" << dendl;
 525   4072  osd/PG.cc <<sched_scrub>>
             dout(10) << "sched_scrub: scrub will be deep" << dendl;
 526   4096  osd/PG.cc <<sched_scrub>>
             dout(20) << "sched_scrub: reserved " << scrubber...rved_peers << ", waiting for replicas" << dendl;
 527   4141  osd/PG.cc <<do_replica_scrub_map>>
             dout(7) << __func__ << " " << *m << dendl;
 528   4143  osd/PG.cc <<do_replica_scrub_map>>
             dout(10) << __func__ << " discarding old from "
 529   4149  osd/PG.cc <<do_replica_scrub_map>>
             dout(10) << __func__ << " scrub isn't active" << dendl;
 530   4157  osd/PG.cc <<do_replica_scrub_map>>
             dout(10) << "map version is "
 531   4161  osd/PG.cc <<do_replica_scrub_map>>
             dout(10) << __func__ << " waiting_on_whom was " << scrubber.waiting_on_whom
 532   4166  osd/PG.cc <<do_replica_scrub_map>>
             dout(10) << __func__ << " replica was preempted, setting flag" << dendl;
 533   4182  osd/PG.cc <<_request_scrub_map>>
             dout(10) << "scrub requesting scrubmap from osd." << replica
 534   4200  osd/PG.cc <<handle_scrub_reserve_request>>
             dout(7) << __func__ << " " << *op->get_req() << dendl;
 535   4203  osd/PG.cc <<handle_scrub_reserve_request>>
             dout(10) << __func__ << " ignoring reserve request: Already reserved"
 536   4211  osd/PG.cc <<handle_scrub_reserve_request>>
             dout(20) << __func__ << ": failed to reserve remotely" << dendl;
 537   4226  osd/PG.cc <<handle_scrub_reserve_grant>>
             dout(7) << __func__ << " " << *op->get_req() << dendl;
 538   4229  osd/PG.cc <<handle_scrub_reserve_grant>>
             dout(10) << "ignoring obsolete scrub reserve reply" << dendl;
 539   4233  osd/PG.cc <<handle_scrub_reserve_grant>>
             dout(10) << " already had osd." << from << " reserved" << dendl;
 540   4235  osd/PG.cc <<handle_scrub_reserve_grant>>
             dout(10) << " osd." << from << " scrub reserve = success" << dendl;
 541   4243  osd/PG.cc <<handle_scrub_reserve_reject>>
             dout(7) << __func__ << " " << *op->get_req() << dendl;
 542   4246  osd/PG.cc <<handle_scrub_reserve_reject>>
             dout(10) << "ignoring obsolete scrub reserve reply" << dendl;
 543   4250  osd/PG.cc <<handle_scrub_reserve_reject>>
             dout(10) << " already had osd." << from << " reserved" << dendl;
 544   4253  osd/PG.cc <<handle_scrub_reserve_reject>>
             dout(10) << " osd." << from << " scrub reserve = fail" << dendl;
 545   4261  osd/PG.cc <<handle_scrub_reserve_release>>
             dout(7) << __func__ << " " << *op->get_req() << dendl;
 546   4315  osd/PG.cc <<scrub_reserve_replicas>>
             dout(10) << "scrub requesting reserve from osd." << *i << dendl;
 547   4332  osd/PG.cc <<scrub_unreserve_replicas>>
             dout(10) << "scrub requesting unreserve from osd." << *i << dendl;
 548   4373  osd/PG.cc <<_scan_snaps>>
             dout(20) << __func__ << " start" << dendl;
 549   4381  osd/PG.cc <<_scan_snaps>>
             dout(20) << __func__ << " " << hoid << dendl;
 550   4527  osd/PG.cc <<build_scrub_map_chunk>>
             dout(10) << __func__ << " [" << start << "," << end << ") "
 551   4544  osd/PG.cc <<build_scrub_map_chunk>>
             dout(5) << "objects_list_range error: " << pos.ret << dendl;
 552   4564  osd/PG.cc <<build_scrub_map_chunk>>
             dout(20) << __func__ << " finishing" << dendl;
 553   4574  osd/PG.cc <<build_scrub_map_chunk>>
             dout(20) << __func__ << " done, got " << map.objects.size() << " items"
 554   4652  osd/PG.cc <<replica_scrub>>
             dout(7) << "replica_scrub" << dendl;
 555   4655  osd/PG.cc <<replica_scrub>>
             dout(10) << "replica_scrub discarding old replica_scrub from "
 556   4663  osd/PG.cc <<replica_scrub>>
             dout(10) << "waiting for active pushes to finish" << dendl;
 557   4700  osd/PG.cc <<scrub>>
             dout(20) << __func__ << " state is INACTIVE|NEW_CHUNK, sleeping" << dendl;
 558   4749  osd/PG.cc <<scrub>>
             dout(10) << "scrub -- not primary or active or not clean" << dendl;
 559   4762  osd/PG.cc <<scrub>>
             dout(10) << "starting a new chunky scrub" << dendl;
 560   4851  osd/PG.cc <<chunky_scrub>>
             dout(10) << "scrub pg changed, aborting" << dendl;
 561   4862  osd/PG.cc <<chunky_scrub>>
             dout(20) << "scrub state " << Scrubber::state_string(scrubber.state)
 562   4867  osd/PG.cc <<chunky_scrub>>
             dout(10) << "scrub start" << dendl;
 563   4914  osd/PG.cc <<chunky_scrub>>
             dout(10) << __func__ << " preempted, " << scrubber.preempt_left
 564   4975  osd/PG.cc <<chunky_scrub>>
             dout(10) << __func__ << ": scrub blocked somewhere in range "
 565   5015  osd/PG.cc <<chunky_scrub>>
             dout(15) << "wait for pushes to apply" << dendl;
 566   5023  osd/PG.cc <<chunky_scrub>>
             dout(15) << "wait for EC read/modify/writes to queue" << dendl;
 567   5041  osd/PG.cc <<chunky_scrub>>
             dout(10) << __func__ << " waiting_on_whom " << scrubber.waiting_on_whom
 568   5053  osd/PG.cc <<chunky_scrub>>
             dout(10) << __func__ << " preempted" << dendl;
 569   5073  osd/PG.cc <<chunky_scrub>>
             dout(5) << "error: " << scrubber.primary_scrubmap_pos.ret
 570   5079  osd/PG.cc <<chunky_scrub>>
             dout(10) << __func__ << " waiting_on_whom was "
 571   5090  osd/PG.cc <<chunky_scrub>>
             dout(10) << "wait for replicas to build scrub map" << dendl;
 572   5097  osd/PG.cc <<chunky_scrub>>
             dout(10) << __func__ << " preempted, restarting chunk" << dendl;
 573   5121  osd/PG.cc <<chunky_scrub>>
             dout(10) << __func__ << " waiting on "
 574   5148  osd/PG.cc <<chunky_scrub>>
             dout(10) << "scrub finished, requeuing snap_trimmer" << dendl;
 575   5157  osd/PG.cc <<chunky_scrub>>
             dout(10) << __func__ << " preempted" << dendl;
 576   5198  osd/PG.cc <<chunky_scrub>>
             dout(20) << "scrub final state " << Scrubber::state_string(scrubber.state)
 577   5209  osd/PG.cc <<write_blocked_by_scrub>>
             dout(10) << __func__ << " " << soid << " preempted" << dendl;
 578   5212  osd/PG.cc <<write_blocked_by_scrub>>
             dout(10) << __func__ << " " << soid << " already preempted" << dendl;
 579   5248  osd/PG.cc <<scrub_compare_maps>>
             dout(10) << __func__ << " has maps, analyzing" << dendl;
 580   5261  osd/PG.cc <<scrub_compare_maps>>
             dout(2) << __func__ << " replica " << i << " has "
 581   5284  osd/PG.cc <<scrub_compare_maps>>
             dout(10) << __func__ << " comparing replica scrub maps" << dendl;
 582   5289  osd/PG.cc <<scrub_compare_maps>>
             dout(2) << __func__ << " osd." << acting[0] << " has "
 583   5308  osd/PG.cc <<scrub_compare_maps>>
             dout(2) << ss.str() << dendl;
 584   5348  osd/PG.cc <<scrub_compare_maps>>
             dout(10) << __func__ << ": discarding scrub results" << dendl;
 585   5351  osd/PG.cc <<scrub_compare_maps>>
             dout(10) << __func__ << ": updating scrub object" << dendl;
 586   5361  osd/PG.cc <<scrub_process_inconsistent>>
             dout(10) << __func__ << ": checking authoritative" << dendl;
 587   5372  osd/PG.cc <<scrub_process_inconsistent>>
             dout(2) << ss.str() << dendl;
 588   5518  osd/PG.cc <<share_pg_info>>
             dout(10) << "share_pg_info" << dendl;
 589   5643  osd/PG.cc <<update_history>>
             dout(20) << __func__ << " advanced history from " << new_history << dendl;
 590   5646  osd/PG.cc <<update_history>>
             dout(20) << __func__ << " clearing past_intervals" << dendl;
 591   5669  osd/PG.cc <<fulfill_log>>
             dout(10) << "log request from " << from << dendl;
 592   5684  osd/PG.cc <<fulfill_log>>
             dout(10) << " sending info+missing+log since " << query.since
 593   5695  osd/PG.cc <<fulfill_log>>
             dout(10) << " sending info+missing+full log" << dendl;
 594   5699  osd/PG.cc <<fulfill_log>>
             dout(10) << " sending " << mlog->log << " " << mlog->missing << dendl;
 595   5710  osd/PG.cc <<check_full_transition>>
             dout(10) << " cluster was marked full in " << osdmap->get_epoch() << dendl;
 596   5720  osd/PG.cc <<check_full_transition>>
             dout(10) << " pool was marked full in " << osdmap->get_epoch() << dendl;
 597   5762  osd/PG.cc <<old_peering_msg>>
             dout(10) << "old_peering_msg reply_epoch " << reply_epoch << " query_epoch " << query_epoch
 598   5772  osd/PG.cc <<set_last_peering_reset>>
             dout(20) << "set_last_peering_reset " << get_osdmap()->get_epoch() << dendl;
 599   5804  osd/PG.cc <<reset_interval_flush>>
             dout(10) << "Clearing blocked outgoing recovery messages" << dendl;
 600   5810  osd/PG.cc <<reset_interval_flush>>
             dout(10) << "Beginning to block outgoing recovery messages" << dendl;
 601   5813  osd/PG.cc <<reset_interval_flush>>
             dout(10) << "Not blocking outgoing recovery messages" << dendl;
 602   6054  osd/PG.cc <<proc_primary_info>>
             dout(10) << __func__ << " updating purged_snaps to " << oinfo.purged_snaps
 603   6172  osd/PG.cc <<can_discard_op>>
             dout(20) << " discard " << *m << dendl;
 604   6177  osd/PG.cc <<can_discard_op>>
             dout(7) << " changed after " << m->get_map_epoch()
 605   6184  osd/PG.cc <<can_discard_op>>
             dout(7) << __func__ << " sent before last_force_op_resend "
 606   6189  osd/PG.cc <<can_discard_op>>
             dout(7) << __func__ << " pg split in "
 607   6195  osd/PG.cc <<can_discard_op>>
             dout(7) << __func__ << " sent before last_force_op_resend_preluminous "
 608   6233  osd/PG.cc <<can_discard_replica_op>>
             dout(10) << "can_discard_replica_op pg changed " << info.history
 609   6247  osd/PG.cc <<can_discard_scan>>
             dout(10) << " got old scan, ignoring" << dendl;
 610   6259  osd/PG.cc <<can_discard_backfill>>
             dout(10) << " got old backfill, ignoring" << dendl;
 611   6324  osd/PG.cc <<take_waiters>>
             dout(10) << "take_waiters" << dendl;
 612   6330  osd/PG.cc <<do_peering_event>>
             dout(10) << __func__ << ": " << evt->get_desc() << dendl;
 613   6333  osd/PG.cc <<do_peering_event>>
             dout(10) << "discard old " << evt->get_desc() << dendl;
 614   6352  osd/PG.cc <<queue_null>>
             dout(10) << "null" << dendl;
 615   6362  osd/PG.cc <<queue_query>>
             dout(10) << "handle_query " << q << " from replica " << from << dendl;
 616   6400  osd/PG.cc <<find_unfound>>
             dout(10) << __func__ << ": no luck, giving up on this pg for now (" << action << ")" << dendl;
 617   6402  osd/PG.cc <<find_unfound>>
             dout(10) << __func__ << ": no luck, giving up on this pg for now (queue_recovery)" << dendl;
 618   6437  osd/PG.cc <<handle_activate_map>>
             dout(10) << "handle_activate_map " << dendl;
 619   6442  osd/PG.cc <<handle_activate_map>>
             dout(20) << __func__ << ": Dirtying info: last_persisted is "
 620   6447  osd/PG.cc <<handle_activate_map>>
             dout(20) << __func__ << ": Not dirtying info: last_persisted is "
 621   6459  osd/PG.cc <<handle_initialize>>
             dout(10) << __func__ << dendl;
 622   6466  osd/PG.cc <<handle_query_state>>
             dout(10) << "handle_query_state" << dendl;
 623   6499  osd/PG.cc <<_delete_some>>
             dout(10) << __func__ << dendl;
 624   6512  osd/PG.cc <<_delete_some>>
             dout(20) << __func__ << " " << olist << dendl;
 625   6529  osd/PG.cc <<_delete_some>>
             dout(20) << __func__ << " deleting " << num << " objects" << dendl;
 626   6533  osd/PG.cc <<_delete_some>>
             dout(20) << __func__ << " finished" << dendl;
 627     50  osd/PGBackend.cc <<recover_delete_object>>
             dout(20) << __func__ << " will remove " << oid << " " << v << " from "
 628    121  osd/PGBackend.cc <<handle_recovery_delete>>
             dout(20) << __func__ << " " << op << dendl;
 629    154  osd/PGBackend.cc <<handle_recovery_delete_reply>>
             dout(20) << __func__ << " " << op << dendl;
 630    166  osd/PGBackend.cc <<handle_recovery_delete_reply>>
             dout(20) << __func__ << " " << oid << " still missing on at least "
 631    173  osd/PGBackend.cc <<handle_recovery_delete_reply>>
             dout(20) << __func__ << " completed recovery, local_missing = "
 632    317  osd/PGBackend.cc <<on_change_cleanup>>
             dout(10) << __func__ << dendl;
 633    322  osd/PGBackend.cc <<on_change_cleanup>>
             dout(10) << __func__ << ": Removing oid "
 634    575  osd/PGBackend.cc <<be_scan_list>>
             dout(10) << __func__ << " " << pos << dendl;
 635    600  osd/PGBackend.cc <<be_scan_list>>
             dout(25) << __func__ << " " << poid << dendl;
 636    602  osd/PGBackend.cc <<be_scan_list>>
             dout(25) << __func__ << " " << poid << " got " << r
 637    605  osd/PGBackend.cc <<be_scan_list>>
             dout(25) << __func__ << " " << poid << " got " << r
 638    171  osd/PGLog.cc <<trim>>
             dout(10) << "trim " << log << " to " << trim_to << dendl;
 639    183  osd/PGLog.cc <<proc_replica_log>>
             dout(10) << "proc_replica_log for osd." << from << ": "
 640    187  osd/PGLog.cc <<proc_replica_log>>
             dout(10) << __func__ << ": osd." << from << " does not overlap, not looking "
 641    192  osd/PGLog.cc <<proc_replica_log>>
             dout(10) << __func__ << ": osd." << from << " same log head, not looking "
 642    210  osd/PGLog.cc <<proc_replica_log>>
             dout(20) << " before missing " << i->first << " need " << i->second.need
 643    220  osd/PGLog.cc <<proc_replica_log>>
             dout(20) << "merge_log point (usually last shared) is "
 644    257  osd/PGLog.cc <<proc_replica_log>>
             dout(10) << " peer osd." << from << " last_update now " << lu << dendl;
 645    291  osd/PGLog.cc <<rewind_divergent_log>>
             dout(10) << "rewind_divergent_log truncate divergent future " <<
 646    303  osd/PGLog.cc <<rewind_divergent_log>>
             dout(10) << "rewind_divergent_log future divergent " << entry << dendl;
 647    324  osd/PGLog.cc <<merge_log>>
             dout(10) << "merge_log " << olog << " from osd." << fromosd
 648    337  osd/PGLog.cc <<merge_log>>
             dout(20) << "pg_missing_t sobject: " << i->first << dendl;
 649    348  osd/PGLog.cc <<merge_log>>
             dout(10) << "merge_log extending tail to " << olog.tail << dendl;
 650    358  osd/PGLog.cc <<merge_log>>
             dout(15) << *to << dendl;
 651    388  osd/PGLog.cc <<merge_log>>
             dout(10) << "merge_log extending head to " << olog.head << dendl;
 652    398  osd/PGLog.cc <<merge_log>>
             dout(20) << " ? " << *from << dendl;
 653    405  osd/PGLog.cc <<merge_log>>
             dout(20) << "merge_log cut point (usually last shared) is "
 654    412  osd/PGLog.cc <<merge_log>>
             dout(10) << "merge_log divergent " << oe << dendl;
 655    453  osd/PGLog.cc <<merge_log>>
             dout(10) << "merge_log result " << log << " " << missing <<
 656    469  osd/PGLog.cc <<merge_log_dups>>
             dout(10) << "merge_log copying olog dups to log " <<
 657    485  osd/PGLog.cc <<merge_log_dups>>
             dout(10) << "merge_log extending dups tail to " <<
 658    510  osd/PGLog.cc <<merge_log_dups>>
             dout(10) << "merge_log extending dups head to " <<
 659    532  osd/PGLog.cc <<merge_log_dups>>
             dout(10) << "merge_log removed dups overlapping log entries [" <<
 660    928  osd/PGLog.cc <<rebuild_missing_set_with_deletes>>
             dout(20) << __func__ << " extra missing entry: " << p.first
 661    957  osd/PGLog.cc <<rebuild_missing_set_with_deletes>>
             dout(20) << __func__ << " check for log entry: " << *i << " = " << r << dendl;
 662    961  osd/PGLog.cc <<rebuild_missing_set_with_deletes>>
             dout(20) << __func__ << " store version = " << oi.version << dendl;
 663    355  osd/PrimaryLogPG.cc <<on_local_recover>>
             dout(10) << __func__ << ": " << hoid << dendl;
 664    362  osd/PrimaryLogPG.cc <<on_local_recover>>
             dout(20) << " snapset " << recovery_info.ss << dendl;
 665    366  osd/PrimaryLogPG.cc <<on_local_recover>>
             dout(20) << " snaps " << snaps << dendl;
 666    378  osd/PrimaryLogPG.cc <<on_local_recover>>
             dout(10) << " got old revert version " << recovery_info.version
 667    430  osd/PrimaryLogPG.cc <<on_local_recover>>
             dout(20) << " kicking unreadable waiters on " << hoid << dendl;
 668    460  osd/PrimaryLogPG.cc <<on_global_recover>>
             dout(10) << "pushed " << soid << " to all replicas" << dendl;
 669    480  osd/PrimaryLogPG.cc <<on_global_recover>>
             dout(20) << " kicking degraded waiters on " << soid << dendl;
 670    486  osd/PrimaryLogPG.cc <<on_global_recover>>
             dout(20) << " kicking unreadable waiters on " << soid << dendl;
 671    539  osd/PrimaryLogPG.cc <<on_primary_error>>
             dout(0) << __func__ << ": oid " << oid << " version " << v << dendl;
 672    549  osd/PrimaryLogPG.cc <<backfill_add_missing>>
             dout(0) << __func__ << ": oid " << oid << " version " << v << dendl;
 673    566  osd/PrimaryLogPG.cc <<should_send_op>>
             dout(10) << __func__ << " issue_repop shipping empty opt to osd." << peer
 674    575  osd/PrimaryLogPG.cc <<should_send_op>>
             dout(10) << __func__ << " issue_repop shipping empty opt to osd." << peer
 675    613  osd/PrimaryLogPG.cc <<maybe_kick_recovery>>
             dout(7) << "object " << soid << " v " << v << ", already recovering." << dendl;
 676    615  osd/PrimaryLogPG.cc <<maybe_kick_recovery>>
             dout(7) << "object " << soid << " v " << v << ", is unfound." << dendl;
 677    617  osd/PrimaryLogPG.cc <<maybe_kick_recovery>>
             dout(7) << "object " << soid << " v " << v << ", recovering." << dendl;
 678    687  osd/PrimaryLogPG.cc <<is_degraded_on_async_recovery_target>>
             dout(30) << __func__ << " " << soid << dendl;
 679    707  osd/PrimaryLogPG.cc <<block_write_on_full_cache>>
             dout(20) << __func__ << ": blocking object " << oid
 680    717  osd/PrimaryLogPG.cc <<block_for_clean>>
             dout(20) << __func__ << ": blocking object " << oid
 681    726  osd/PrimaryLogPG.cc <<block_write_on_snap_rollback>>
             dout(20) << __func__ << ": blocking object " << oid.get_head()
 682    738  osd/PrimaryLogPG.cc <<block_write_on_degraded_snap>>
             dout(20) << __func__ << ": blocking object " << snap.get_head()
 683    765  osd/PrimaryLogPG.cc <<wait_for_blocked_object>>
             dout(10) << __func__ << " " << soid << " " << op << dendl;
 684    803  osd/PrimaryLogPG.cc <<maybe_force_recovery>>
             dout(20) << __func__ << " peer " << peer << " min_version " << min_obj->first
 685    903  osd/PrimaryLogPG.cc <<pgls_filter>>
             dout(0) << "getattr (sobj=" << sobj << ", attr="...r->get_xattr() << ") returned " << ret << dendl;
 686   1177  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(10) << "do_pg_op " << *m << dendl;
 687   1200  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(0) << "unable to decode PGLS_FILTER description in " << *m << dendl;
 688   1222  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(10) << " pgnls pg=" << m->get_pg()
 689   1230  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(10) << " pgnls pg=" << m->get_pg() << " count " << list_size
 690   1239  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(0) << "unable to decode PGNLS handle in " << *m << dendl;
 691   1248  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(10) << " pgnls lower_bound " << lower_bound
 692   1253  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(10) << "outside of PG bounds " << pg_start << " .. "
 693   1302  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(10) << " pgnls candidate 0x" << std::hex << candidate.get_hash()
 694   1332  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(20) << "pgnls item 0x" << std::hex
 695   1356  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(10) << "pgnls handle=" << response.handle << dendl;
 696   1360  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(10) << " pgnls result=" << result << " outdata.length()="
 697   1371  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(0) << "unable to decode PGLS_FILTER description in " << *m << dendl;
 698   1393  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(10) << " pgls pg=" << m->get_pg()
 699   1401  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(10) << " pgls pg=" << m->get_pg() << " count " << list_size << dendl;
 700   1409  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(0) << "unable to decode PGLS handle in " << *m << dendl;
 701   1494  osd/PrimaryLogPG.cc <<do_pg_op>>
             dout(10) << " pgls result=" << result << " outdata.length()="
 702   1581  osd/PrimaryLogPG.cc <<do_scrub_ls>>
             dout(10) << " scrubls pg=" << m->get_pg() << " != " << info.pgid << dendl;
 703   1589  osd/PrimaryLogPG.cc <<do_scrub_ls>>
             dout(10) << " corrupted scrub_ls_arg_t" << dendl;
 704   1644  osd/PrimaryLogPG.cc <<calc_trim_to>>
             dout(10) << "calc_trim_to trimming to min_last_complete_ondisk" << dendl;
 705   1648  osd/PrimaryLogPG.cc <<calc_trim_to>>
             dout(10) << "calc_trim_to " << pg_trim_to << " -> " << new_trim_to << dendl;
 706   1696  osd/PrimaryLogPG.cc <<handle_backoff>>
             dout(10) << __func__ << " backoff ack id " << m->id
 707   1713  osd/PrimaryLogPG.cc <<do_request>>
             dout(20) << __func__ << " waiting_for_map "
 708   1720  osd/PrimaryLogPG.cc <<do_request>>
             dout(20) << __func__ << " min " << op->min_epoch
 709   2072  osd/PrimaryLogPG.cc <<do_request>>
             dout(10) << "do_op " << *m
 710   2110  osd/PrimaryLogPG.cc <<do_request>>
             dout(20) << __func__ << ": waiting for scrub" << dendl;
 711   2152  osd/PrimaryLogPG.cc <<do_request>>
             dout(3) << __func__ << " dup " << m->get_reqid()
 712   2157  osd/PrimaryLogPG.cc <<do_request>>
             dout(10) << " waiting for " << version << " to commit" << dendl;
 713   2184  osd/PrimaryLogPG.cc <<do_request>>
             dout(10) << "LIST_SNAPS with incorrect context" << dendl;
 714   2190  osd/PrimaryLogPG.cc <<do_request>>
             dout(10) << "non-LIST_SNAPS on snapdir" << dendl;
 715   2226  osd/PrimaryLogPG.cc <<do_request>>
             dout(10) << __func__ << ": clone " << obc->obs.oi.soid
 716   2236  osd/PrimaryLogPG.cc <<do_request>>
             dout(10) << __func__ << ": clone " << obc->obs.oi.soid
 717   2290  osd/PrimaryLogPG.cc <<do_request>>
             dout(20) << __func__ << ": find_object_context got error " << r << dendl;
 718   2303  osd/PrimaryLogPG.cc <<do_request>>
             dout(10) << " provided locator " << m->get_object_locator()
 719   2317  osd/PrimaryLogPG.cc <<do_request>>
             dout(25) << __func__ << " oi " << obc->obs.oi << dendl;
 720   2322  osd/PrimaryLogPG.cc <<do_request>>
             dout(20) << __func__ << ": skipping rw locks" << dendl;
 721   2324  osd/PrimaryLogPG.cc <<do_request>>
             dout(20) << __func__ << ": part of flush, will ignore write lock" << dendl;
 722   2330  osd/PrimaryLogPG.cc <<do_request>>
             dout(10) << __func__ << " no flush in progress, aborting" << dendl;
 723   2335  osd/PrimaryLogPG.cc <<do_request>>
             dout(20) << __func__ << " waiting for rw locks " << dendl;
 724   2340  osd/PrimaryLogPG.cc <<do_request>>
             dout(20) << __func__ << " obc " << *obc << dendl;
 725   2343  osd/PrimaryLogPG.cc <<do_request>>
             dout(20) << __func__ << " returned an error: " << r << dendl;
 726   2360  osd/PrimaryLogPG.cc <<do_request>>
             dout(20) << __func__ << ": object " << obc->obs.oi.soid
 727   2406  osd/PrimaryLogPG.cc <<maybe_handle_manifest_detail>>
             dout(20) << __func__ << ": ignoring redirect due to flag" << dendl;
 728   2413  osd/PrimaryLogPG.cc <<maybe_handle_manifest_detail>>
             dout(20) << __func__ << " blocked on " << obc->obs.oi.soid << dendl;
 729   2457  osd/PrimaryLogPG.cc <<maybe_handle_manifest_detail>>
             dout(20) << __func__ << ": " << head << " is degraded, waiting" << dendl;
 730   2463  osd/PrimaryLogPG.cc <<maybe_handle_manifest_detail>>
             dout(20) << __func__ << ": waiting for scrub" << dendl;
 731   2523  osd/PrimaryLogPG.cc <<handle_manifest_flush>>
             dout(10) << __func__ << " no flush_op found" << dendl;
 732   2599  osd/PrimaryLogPG.cc <<do_manifest_flush>>
             dout(0) << __func__ << " read fail " << " offset: " << tgt_offset
 733   2624  osd/PrimaryLogPG.cc <<do_manifest_flush>>
             dout(20) << __func__ << " offset: " << tgt_offset << " len: " << tgt_length
 734   2638  osd/PrimaryLogPG.cc <<finish_manifest_flush>>
             dout(10) << __func__ << " " << oid << " tid " << tid
 735   2642  osd/PrimaryLogPG.cc <<finish_manifest_flush>>
             dout(10) << __func__ << " no flush_op found" << dendl;
 736   2660  osd/PrimaryLogPG.cc <<record_write_error>>
             dout(20) << __func__ << " r=" << r << dendl;
 737   2723  osd/PrimaryLogPG.cc <<maybe_handle_cache_detail>>
             dout(20) << __func__ << ": ignoring cache due to flag" << dendl;
 738   2730  osd/PrimaryLogPG.cc <<maybe_handle_cache_detail>>
             dout(25) << __func__ << " " << obc->obs.oi << " "
 739   2737  osd/PrimaryLogPG.cc <<maybe_handle_cache_detail>>
             dout(25) << __func__ << " (no obc)"
 740   2746  osd/PrimaryLogPG.cc <<maybe_handle_cache_detail>>
             dout(20) << __func__ << " blocked on " << obc->obs.oi.soid << dendl;
 741   2760  osd/PrimaryLogPG.cc <<maybe_handle_cache_detail>>
             dout(20) << __func__ << " cache miss; ask the primary" << dendl;
 742   2784  osd/PrimaryLogPG.cc <<maybe_handle_cache_detail>>
             dout(20) << __func__ << " cache pool full, proxying read" << dendl;
 743   2788  osd/PrimaryLogPG.cc <<maybe_handle_cache_detail>>
             dout(20) << __func__ << " cache pool full, waiting" << dendl;
 744   2856  osd/PrimaryLogPG.cc <<maybe_handle_cache_detail>>
             dout(20) << __func__ << " cache pool full, waiting" << dendl;
 745   2881  osd/PrimaryLogPG.cc <<maybe_handle_cache_detail>>
             dout(20) << __func__ << " cache pool full, waiting" << dendl;
 746   2893  osd/PrimaryLogPG.cc <<maybe_handle_cache_detail>>
             dout(20) << __func__ << " cache pool full, waiting" << dendl;
 747   2919  osd/PrimaryLogPG.cc <<maybe_promote>>
             dout(20) << __func__ << " missing_oid " << missing_oid
 748   2962  osd/PrimaryLogPG.cc <<maybe_promote>>
             dout(10) << __func__ << " promote throttled" << dendl;
 749   2977  osd/PrimaryLogPG.cc <<do_cache_redirect>>
             dout(10) << "sending redirect to pool " << pool.info.tier_of << " for op "
 750   3100  osd/PrimaryLogPG.cc <<do_proxy_read>>
             dout(10) << __func__ << " Start proxy read for " << *m << dendl;
 751   3141  osd/PrimaryLogPG.cc <<finish_proxy_read>>
             dout(10) << __func__ << " " << oid << " tid " << tid
 752   3146  osd/PrimaryLogPG.cc <<finish_proxy_read>>
             dout(10) << __func__ << " no proxyread_op found" << dendl;
 753   3151  osd/PrimaryLogPG.cc <<finish_proxy_read>>
             dout(10) << __func__ << " tid " << tid << " != prdop " << prdop
 754   3156  osd/PrimaryLogPG.cc <<finish_proxy_read>>
             dout(10) << __func__ << " oid " << oid << " != prdop " << prdop
 755   3164  osd/PrimaryLogPG.cc <<finish_proxy_read>>
             dout(10) << __func__ << " no in_progress_proxy_ops found" << dendl;
 756   3180  osd/PrimaryLogPG.cc <<finish_proxy_read>>
             dout(20) << __func__ << " " << oid << " is not completed " << dendl;
 757   3202  osd/PrimaryLogPG.cc <<kick_proxy_ops_blocked>>
             dout(10) << __func__ << " " << soid << " requeuing " << ls.size() << " requests" << dendl;
 758   3309  osd/PrimaryLogPG.cc <<do_proxy_write>>
             dout(10) << __func__ << " Start proxy write for " << *m << dendl;
 759   3386  osd/PrimaryLogPG.cc <<do_proxy_chunked_op>>
             dout(20) << __func__ << " chunk_index: " << chunks->first
 760   3439  osd/PrimaryLogPG.cc <<refcount_manifest>>
             dout(10) << __func__ << " Start refcount for " << soid << dendl;
 761   3490  osd/PrimaryLogPG.cc <<do_proxy_chunked_read>>
             dout(10) << __func__ << " Start do chunk proxy read for " << *m
 762   3562  osd/PrimaryLogPG.cc <<can_proxy_chunked_read>>
             dout(20) << __func__ << " requested chunks don't exist in chunk_map " << dendl;
 763   3576  osd/PrimaryLogPG.cc <<finish_proxy_write>>
             dout(10) << __func__ << " " << oid << " tid " << tid
 764   3581  osd/PrimaryLogPG.cc <<finish_proxy_write>>
             dout(10) << __func__ << " no proxywrite_op found" << dendl;
 765   3592  osd/PrimaryLogPG.cc <<finish_proxy_write>>
             dout(10) << __func__ << " no in_progress_proxy_ops found" << dendl;
 766   3612  osd/PrimaryLogPG.cc <<finish_proxy_write>>
             dout(20) << __func__ << " " << oid << " tid " << tid
 767   3633  osd/PrimaryLogPG.cc <<finish_proxy_write>>
             dout(10) << " sending commit on " << pwop << " " << reply << dendl;
 768   3735  osd/PrimaryLogPG.cc <<promote_object>>
             dout(10) << __func__ << " " << hoid
 769   3740  osd/PrimaryLogPG.cc <<promote_object>>
             dout(10) << __func__ << " " << hoid
 770   3743  osd/PrimaryLogPG.cc <<promote_object>>
             dout(10) << __func__ << " " << hoid
 771   3805  osd/PrimaryLogPG.cc <<execute_ctx>>
             dout(10) << __func__ << " " << ctx << dendl;
 772   3831  osd/PrimaryLogPG.cc <<execute_ctx>>
             dout(10) << " ORDERSNAP flag set and snapc seq " << ctx->snapc.seq
 773   3842  osd/PrimaryLogPG.cc <<execute_ctx>>
             dout(10) << __func__ << " " << soid << " " << *ctx->ops
 774   3848  osd/PrimaryLogPG.cc <<execute_ctx>>
             dout(10) << __func__ << " " << soid << " " << *ctx->ops
 775   3855  osd/PrimaryLogPG.cc <<execute_ctx>>
             dout(30) << __func__ << " user_at_version " << ctx->user_at_version << dendl;
 776   3906  osd/PrimaryLogPG.cc <<execute_ctx>>
             dout(20) << " zeroing write result code " << result << dendl;
 777   3936  osd/PrimaryLogPG.cc <<execute_ctx>>
             dout(20) << " op order client." << n << " tid " << t << " (first)" << dendl;
 778   3939  osd/PrimaryLogPG.cc <<execute_ctx>>
             dout(20) << " op order client." << n << " tid " << t << " last was " << p->second << dendl;
 779   3952  osd/PrimaryLogPG.cc <<execute_ctx>>
             dout(20) << __func__ << " update_log_only -- result=" << result << dendl;
 780   3988  osd/PrimaryLogPG.cc <<execute_ctx>>
             dout(10) << " sending reply on " << *m << " " << reply << dendl;
 781   4086  osd/PrimaryLogPG.cc <<log_op_stats>>
             dout(15) << "log_op_stats " << *m
 782   4098  osd/PrimaryLogPG.cc <<do_scan>>
             dout(10) << "do_scan " << *m << dendl;
 783   4107  osd/PrimaryLogPG.cc <<do_scan>>
             dout(1) << __func__ << ": Canceling backfill: Full." << dendl;
 784   4170  osd/PrimaryLogPG.cc <<do_backfill>>
             dout(10) << "do_backfill " << *m << dendl;
 785   4225  osd/PrimaryLogPG.cc <<do_backfill_remove>>
             dout(7) << __func__ << " " << m->ls << dendl;
 786   4274  osd/PrimaryLogPG.cc <<trim_object>>
             dout(10) << coid << " old_snaps " << old_snaps
 787   4307  osd/PrimaryLogPG.cc <<trim_object>>
             dout(10) << __func__ << ": Unable to get a wlock on " << coid << dendl;
 788   4316  osd/PrimaryLogPG.cc <<trim_object>>
             dout(10) << __func__ << ": Unable to get a wlock on " << head_oid << dendl;
 789   4326  osd/PrimaryLogPG.cc <<trim_object>>
             dout(10) << coid << " snaps " << old_snaps << " -> "
 790   4357  osd/PrimaryLogPG.cc <<trim_object>>
             dout(20) << __func__ << " trimming whiteout on " << coid << dendl;
 791   4394  osd/PrimaryLogPG.cc <<trim_object>>
             dout(10) << coid << " snaps " << old_snaps << " -> " << new_snaps << dendl;
 792   4426  osd/PrimaryLogPG.cc <<trim_object>>
             dout(10) << coid << " new snapset " << snapset << " on "
 793   4436  osd/PrimaryLogPG.cc <<trim_object>>
             dout(10) << coid << " removing " << head_oid << dendl;
 794   4457  osd/PrimaryLogPG.cc <<trim_object>>
             dout(20) << __func__ << " trimming whiteout on " << oi.soid << dendl;
 795   4469  osd/PrimaryLogPG.cc <<trim_object>>
             dout(10) << coid << " filtering snapset on " << head_oid << dendl;
 796   4471  osd/PrimaryLogPG.cc <<trim_object>>
             dout(10) << coid << " writing updated snapset on " << head_oid
 797   4510  osd/PrimaryLogPG.cc <<kick_snap_trim>>
             dout(10) << __func__ << ": nosnaptrim set, not kicking" << dendl;
 798   4512  osd/PrimaryLogPG.cc <<kick_snap_trim>>
             dout(10) << __func__ << ": clean and snaps to trim, kicking" << dendl;
 799   4534  osd/PrimaryLogPG.cc <<snap_trimmer>>
             dout(10) << "snap_trimmer posting" << dendl;
 800   4536  osd/PrimaryLogPG.cc <<snap_trimmer>>
             dout(10) << "snap_trimmer complete" << dendl;
 801   4550  osd/PrimaryLogPG.cc <<do_xattr_cmp_u64>>
             dout(20) << "do_xattr_cmp_u64 '" << v1 << "' vs '" << v2 << "' op " << op << dendl;
 802   4574  osd/PrimaryLogPG.cc <<do_xattr_cmp_str>>
             dout(20) << "do_xattr_cmp_str '" << v1s << "' vs '" << v2s << "' op " << op << dendl;
 803   4633  osd/PrimaryLogPG.cc <<do_tmap2omap>>
             dout(20) << " convert tmap to omap for " << ctx->new_obs.oi.soid << dendl;
 804   4728  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(10) << "tmapup is a no-op" << dendl;
 805   4738  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(10) << "tmapup read " << newop.outdata.length() << dendl;
 806   4740  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(30) << " starting is \n";
 807   4747  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(30) << "the update command is: \n";
 808   4758  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(10) << "tmapup header " << header.length() << dendl;
 809   4763  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(10) << "tmapup new header " << header.length() << dendl;
 810   4768  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(20) << "tmapup initial nkeys " << nkeys << dendl;
 811   4791  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(5) << "tmapup warning: key '" << key << "' < previous key '" << last_in_key
 812   4798  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(10) << "tmapup op " << (int )op << " key " << key << dendl;
 813   4803  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(20) << " (have_next=" << have_next << " nextkey=" << nextkey << ")" << dendl;
 814   4810  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(20) << " keep " << nextkey << " " << nextval.length() << dendl;
 815   4813  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(20) << " drop " << nextkey << " " << nextval.length() << dendl;
 816   4835  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(20) << " set " << key << " " << val.length() << dendl;
 817   4850  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(20) << " create " << key << " " << val.length() << dendl;
 818   4860  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(10) << " invalid tmap op " << (int )op << dendl;
 819   4869  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(20) << " keep " << nextkey << " " << nextval.length() << dendl;
 820   4874  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(20) << " keep trailing " << rest.length()
 821   4880  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(20) << "tmapup final nkeys " << nkeys << dendl;
 822   4885  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(30) << " final is \n";
 823   4896  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(0) << " **** debug sanity check, looks ok ****" << dendl;
 824   4901  osd/PrimaryLogPG.cc <<do_tmapup>>
             dout(20) << "tmapput write " << obl.length() << dendl;
 825   5026  osd/PrimaryLogPG.cc <<maybe_create_new_object>>
             dout(10) << __func__ << " clearing whiteout on " << obs.oi.soid << dendl;
 826   5081  osd/PrimaryLogPG.cc <<do_checksum>>
             dout(20) << __func__ << dendl;
 827   5086  osd/PrimaryLogPG.cc <<do_checksum>>
             dout(10) << __func__ << ": length required when chunk size provided"
 828   5091  osd/PrimaryLogPG.cc <<do_checksum>>
             dout(10) << __func__ << ": length not aligned to chunk size" << dendl;
 829   5108  osd/PrimaryLogPG.cc <<do_checksum>>
             dout(10) << __func__ << ": length (trimmed to 0x"
 830   5129  osd/PrimaryLogPG.cc <<do_checksum>>
             dout(10) << __func__ << ": unknown crc type ("
 831   5136  osd/PrimaryLogPG.cc <<do_checksum>>
             dout(10) << __func__ << ": init value not provided" << dendl;
 832   5164  osd/PrimaryLogPG.cc <<do_checksum>>
             dout(10) << __func__ << ": async_read noted for " << soid << dendl;
 833   5197  osd/PrimaryLogPG.cc <<finish_checksum>>
             dout(20) << __func__ << dendl;
 834   5295  osd/PrimaryLogPG.cc <<do_extent_cmp>>
             dout(20) << __func__ << dendl;
 835   5312  osd/PrimaryLogPG.cc <<do_extent_cmp>>
             dout(20) << __func__ << " zero length extent" << dendl;
 836   5315  osd/PrimaryLogPG.cc <<do_extent_cmp>>
             dout(20) << __func__ << " object DNE" << dendl;
 837   5334  osd/PrimaryLogPG.cc <<do_extent_cmp>>
             dout(10) << __func__ << ": async_read noted for " << soid << dendl;
 838   5372  osd/PrimaryLogPG.cc <<do_read>>
             dout(20) << __func__ << dendl;
 839   5419  osd/PrimaryLogPG.cc <<do_read>>
             dout(10) << " async_read noted for " << soid << dendl;
 840   5446  osd/PrimaryLogPG.cc <<do_read>>
             dout(10) << " read got " << r << " / " << op.extent.length
 841   5458  osd/PrimaryLogPG.cc <<do_sparse_read>>
             dout(20) << __func__ << dendl;
 842   5464  osd/PrimaryLogPG.cc <<do_sparse_read>>
             dout(0) << "sparse_read does not support truncation sequence " << dendl;
 843   5487  osd/PrimaryLogPG.cc <<do_sparse_read>>
             dout(10) << " async_read (was sparse_read) noted for " << soid << dendl;
 844   5492  osd/PrimaryLogPG.cc <<do_sparse_read>>
             dout(10) << " sparse read ended up empty for " << soid << dendl;
 845   5543  osd/PrimaryLogPG.cc <<do_sparse_read>>
             dout(10) << "sparse-read " << miter->first << "@" << miter->second
 846   5589  osd/PrimaryLogPG.cc <<do_sparse_read>>
             dout(10) << " sparse_read got " << total_read << " bytes from object "
 847   7565  osd/PrimaryLogPG.cc <<_get_tmap>>
             dout(20) << "unable to get tmap for zero sized " << ctx->new_obs.oi.soid << dendl;
 848   7577  osd/PrimaryLogPG.cc <<_get_tmap>>
             dout(20) << "unsuccessful at decoding tmap for " << ctx->new_obs.oi.soid
 849   7581  osd/PrimaryLogPG.cc <<_get_tmap>>
             dout(20) << "successful at decoding tmap for " << ctx->new_obs.oi.soid
 850   7590  osd/PrimaryLogPG.cc <<_verify_no_head_clones>>
             dout(20) << __func__ << " verifying clones are absent "
 851   7601  osd/PrimaryLogPG.cc <<_verify_no_head_clones>>
             dout(10) << __func__ << " cannot evict head before clone "
 852   7606  osd/PrimaryLogPG.cc <<_verify_no_head_clones>>
             dout(10) << __func__ << " cannot evict head, pending promote on clone "
 853   7639  osd/PrimaryLogPG.cc <<_delete_oid>>
             dout(20) << __func__ << " has or will have clones but no_whiteout=1"
 854   7642  osd/PrimaryLogPG.cc <<_delete_oid>>
             dout(20) << __func__ << " has or will have clones; will whiteout"
 855   7647  osd/PrimaryLogPG.cc <<_delete_oid>>
             dout(20) << __func__ << " " << soid << " whiteout=" << (int )whiteout
 856   7677  osd/PrimaryLogPG.cc <<_delete_oid>>
             dout(20) << __func__ << " will disconnect watcher " << p->first << dendl;
 857   7684  osd/PrimaryLogPG.cc <<_delete_oid>>
             dout(20) << __func__ << " setting whiteout on " << soid << dendl;
 858   7697  osd/PrimaryLogPG.cc <<_delete_oid>>
             dout(20) << __func__ << " deleting whiteout on " << soid << dendl;
 859   7721  osd/PrimaryLogPG.cc <<_rollback_to>>
             dout(10) << "_rollback_to " << soid << " snapid " << snapid << dendl;
 860   7732  osd/PrimaryLogPG.cc <<_rollback_to>>
             dout(20) << "_rollback_to attempted to roll back to a missing or backfilling clone "
 861   7779  osd/PrimaryLogPG.cc <<_rollback_to>>
             dout(20) << "_rollback_to deleting head on " << soid.oid
 862   7795  osd/PrimaryLogPG.cc <<_rollback_to>>
             dout(20) << "_rollback_to attempted to roll back to a degraded object "
 863   7807  osd/PrimaryLogPG.cc <<_rollback_to>>
             dout(10) << "_rollback_to deleting " << soid.oid
 864   7848  osd/PrimaryLogPG.cc <<_rollback_to>>
             dout(10) << __func__ << " setting omap flag on " << obs.oi.soid << dendl;
 865   7851  osd/PrimaryLogPG.cc <<_rollback_to>>
             dout(10) << __func__ << " clearing omap flag on " << obs.oi.soid << dendl;
 866   7881  osd/PrimaryLogPG.cc <<make_writeable>>
             dout(20) << "make_writeable " << soid << " snapset=" << ctx->new_snapset
 867   7888  osd/PrimaryLogPG.cc <<make_writeable>>
             dout(20) << " clearing DIRTY flag" << dendl;
 868   7894  osd/PrimaryLogPG.cc <<make_writeable>>
             dout(20) << " setting DIRTY flag" << dendl;
 869   7901  osd/PrimaryLogPG.cc <<make_writeable>>
             dout(20) << " deletion, decrementing num_dirty and clearing flag" << dendl;
 870   7921  osd/PrimaryLogPG.cc <<make_writeable>>
             dout(10) << " op snapset is old" << dendl;
 871   7960  osd/PrimaryLogPG.cc <<make_writeable>>
             dout(20) << " got greedy write on clone_obc " << *ctx->clone_obc << dendl;
 872   7993  osd/PrimaryLogPG.cc <<make_writeable>>
             dout(10) << " cloning v " << ctx->obs->oi.version
 873   8028  osd/PrimaryLogPG.cc <<make_writeable>>
             dout(20) << "make_writeable " << soid
 874   8101  osd/PrimaryLogPG.cc <<do_osd_op_effects>>
             dout(15) << "do_osd_op_effects " << entity << " con " << conn.get() << dendl;
 875   8117  osd/PrimaryLogPG.cc <<do_osd_op_effects>>
             dout(15) << "do_osd_op_effects applying watch connect on session "
 876   8121  osd/PrimaryLogPG.cc <<do_osd_op_effects>>
             dout(15) << "do_osd_op_effects found existing watch watcher " << watcher
 877   8125  osd/PrimaryLogPG.cc <<do_osd_op_effects>>
             dout(15) << "do_osd_op_effects new watcher " << watcher
 878   8141  osd/PrimaryLogPG.cc <<do_osd_op_effects>>
             dout(10) << "do_osd_op_effects, notify " << *p << dendl;
 879   8157  osd/PrimaryLogPG.cc <<do_osd_op_effects>>
             dout(10) << "starting notify on watch " << i->first << dendl;
 880   8167  osd/PrimaryLogPG.cc <<do_osd_op_effects>>
             dout(10) << "notify_ack " << make_pair(p->watch_cookie.get(), p->notify_id) << dendl;
 881   8169  osd/PrimaryLogPG.cc <<do_osd_op_effects>>
             dout(10) << "notify_ack " << make_pair("NULL", p->notify_id) << dendl;
 882   8177  osd/PrimaryLogPG.cc <<do_osd_op_effects>>
             dout(10) << "acking notify on watch " << i->first << dendl;
 883   8189  osd/PrimaryLogPG.cc <<generate_temp_object>>
             dout(20) << __func__ << " " << hoid << dendl;
 884   8204  osd/PrimaryLogPG.cc <<get_temp_recovery_object>>
             dout(20) << __func__ << " " << hoid << dendl;
 885   8214  osd/PrimaryLogPG.cc <<prepare_transaction>>
             dout(10) << " invalid snapc " << ctx->snapc << dendl;
 886   8249  osd/PrimaryLogPG.cc <<prepare_transaction>>
             dout(20) << __func__ << " full, but proceeding due to FULL_FORCE or MDS"
 887   8253  osd/PrimaryLogPG.cc <<prepare_transaction>>
             dout(20) << __func__ << " full, replying to FULL_TRY op" << dendl;
 888   8257  osd/PrimaryLogPG.cc <<prepare_transaction>>
             dout(20) << __func__ << " full, dropping request (bad client)" << dendl;
 889   8277  osd/PrimaryLogPG.cc <<finish_ctx>>
             dout(20) << __func__ << " " << soid << " " << ctx
 890   8302  osd/PrimaryLogPG.cc <<finish_ctx>>
             dout(10) << " set mtime to " << ctx->new_obs.oi.mtime << dendl;
 891   8305  osd/PrimaryLogPG.cc <<finish_ctx>>
             dout(10) << " mtime unchanged at " << ctx->new_obs.oi.mtime << dendl;
 892   8317  osd/PrimaryLogPG.cc <<finish_ctx>>
             dout(10) << " final snapset " << ctx->new_snapset
 893   8323  osd/PrimaryLogPG.cc <<finish_ctx>>
             dout(10) << " no snapset (this is a clone)" << dendl;
 894   8341  osd/PrimaryLogPG.cc <<finish_ctx>>
             dout(20) << __func__ << " encoding snaps from " << ctx->new_snapset
 895   8351  osd/PrimaryLogPG.cc <<finish_ctx>>
             dout(20) << __func__ << " extra_reqids " << ctx->extra_reqids << dendl;
 896   8386  osd/PrimaryLogPG.cc <<apply_stats>>
             dout(20) << __func__ << " " << soid << " < [" << scrubber.start
 897   8390  osd/PrimaryLogPG.cc <<apply_stats>>
             dout(20) << __func__ << " " << soid << " >= [" << scrubber.start
 898   8570  osd/PrimaryLogPG.cc <<do_copy_get>>
             dout(20) << " got attrs" << dendl;
 899   8592  osd/PrimaryLogPG.cc <<do_copy_get>>
             dout(10) << __func__ << ": async_read noted for " << soid << dendl;
 900   8604  osd/PrimaryLogPG.cc <<do_copy_get>>
             dout(20) << " got data" << dendl;
 901   8641  osd/PrimaryLogPG.cc <<do_copy_get>>
             dout(20) << " got omap" << dendl;
 902   8650  osd/PrimaryLogPG.cc <<do_copy_get>>
             dout(20) << " got reqids" << dendl;
 903   8653  osd/PrimaryLogPG.cc <<do_copy_get>>
             dout(20) << " cursor.is_complete=" << cursor.is_complete()
 904   8686  osd/PrimaryLogPG.cc <<fill_in_copy_get_noent>>
             dout(20) << __func__ << " got reqids " << reply_obj.reqids << dendl;
 905   8704  osd/PrimaryLogPG.cc <<start_copy>>
             dout(10) << __func__ << " " << dest
 906   8744  osd/PrimaryLogPG.cc <<_copy_some>>
             dout(10) << __func__ << " " << *obc << " " << cop << dendl;
 907   8811  osd/PrimaryLogPG.cc <<_copy_some_manifest>>
             dout(10) << __func__ << " " << *obc << " " << cop << dendl;
 908   8841  osd/PrimaryLogPG.cc <<_copy_some_manifest>>
             dout(20) << __func__ << " oid " << obc->obs.oi.soid << " num_chunks: " << num_chunks
 909   8867  osd/PrimaryLogPG.cc <<_copy_some_manifest>>
             dout(20) << __func__ << " tgt_oid: " << soid.oid << " tgt_offset: "
 910   8901  osd/PrimaryLogPG.cc <<process_copy_chunk>>
             dout(10) << __func__ << " " << oid << " tid " << tid
 911   8905  osd/PrimaryLogPG.cc <<process_copy_chunk>>
             dout(10) << __func__ << " no copy_op found" << dendl;
 912   8910  osd/PrimaryLogPG.cc <<process_copy_chunk>>
             dout(10) << __func__ << " tid " << tid << " != cop " << cop
 913   8936  osd/PrimaryLogPG.cc <<process_copy_chunk>>
             dout(10) << __func__ << " clone snap " << *p << " has been deleted"
 914   8948  osd/PrimaryLogPG.cc <<process_copy_chunk>>
             dout(10) << __func__ << " no more snaps for " << oid << dendl;
 915   8986  osd/PrimaryLogPG.cc <<process_copy_chunk>>
             dout(20) << __func__ << " using temp " << cop->results.temp_oid << dendl;
 916   8995  osd/PrimaryLogPG.cc <<process_copy_chunk>>
             dout(10) << __func__ << " fetching more" << dendl;
 917   9002  osd/PrimaryLogPG.cc <<process_copy_chunk>>
             dout(20) << __func__ << std::hex
 918   9048  osd/PrimaryLogPG.cc <<process_copy_chunk>>
             dout(20) << "fill_in_final_tx: writing "
 919   9055  osd/PrimaryLogPG.cc <<process_copy_chunk>>
             dout(20) << "fill_in_final_tx: writing to temp object" << dendl;
 920   9062  osd/PrimaryLogPG.cc <<process_copy_chunk>>
             dout(20) << __func__ << " success; committing" << dendl;
 921   9065  osd/PrimaryLogPG.cc <<process_copy_chunk>>
             dout(20) << __func__ << " complete r = " << cpp_strerror(r) << dendl;
 922   9073  osd/PrimaryLogPG.cc <<process_copy_chunk>>
             dout(10) << __func__ << " deleting partial temp object "
 923   9092  osd/PrimaryLogPG.cc <<process_copy_chunk_manifest>>
             dout(10) << __func__ << " " << oid << " tid " << tid
 924   9096  osd/PrimaryLogPG.cc <<process_copy_chunk_manifest>>
             dout(10) << __func__ << " no copy_op found" << dendl;
 925   9103  osd/PrimaryLogPG.cc <<process_copy_chunk_manifest>>
             dout(10) << __func__ << " tid " << tid << " != cop " << chunk_cop
 926   9135  osd/PrimaryLogPG.cc <<process_copy_chunk_manifest>>
             dout(20) << __func__ << " num_chunk: " << obj_cop->num_chunk << dendl;
 927   9151  osd/PrimaryLogPG.cc <<process_copy_chunk_manifest>>
             dout(20) << __func__ << " took lock on obc, " << obj_cop->obc->rwstate << dendl;
 928   9162  osd/PrimaryLogPG.cc <<process_copy_chunk_manifest>>
             dout(20) << __func__ << " offset: " << p.second->cursor.data_offset
 929   9189  osd/PrimaryLogPG.cc <<process_copy_chunk_manifest>>
             dout(20) << __func__ << " complete r = " << cpp_strerror(r) << dendl;
 930   9228  osd/PrimaryLogPG.cc <<_write_copy_chunk>>
             dout(20) << __func__ << " " << cop
 931   9295  osd/PrimaryLogPG.cc <<finish_copyfrom>>
             dout(20) << "finish_copyfrom on " << ctx->obs->oi.soid << dendl;
 932   9299  osd/PrimaryLogPG.cc <<finish_copyfrom>>
             dout(20) << __func__ << ": exists, removing" << dendl;
 933   9331  osd/PrimaryLogPG.cc <<finish_copyfrom>>
             dout(10) << __func__ << " clearing whiteout on " << obs.oi.soid << dendl;
 934   9337  osd/PrimaryLogPG.cc <<finish_copyfrom>>
             dout(10) << __func__ << " setting omap flag on " << obs.oi.soid << dendl;
 935   9340  osd/PrimaryLogPG.cc <<finish_copyfrom>>
             dout(10) << __func__ << " clearing omap flag on " << obs.oi.soid << dendl;
 936   9364  osd/PrimaryLogPG.cc <<finish_promote>>
             dout(10) << __func__ << " " << soid << " r=" << r
 937   9388  osd/PrimaryLogPG.cc <<finish_promote>>
             dout(20) << __func__ << " snaps " << results->snaps << dendl;
 938   9391  osd/PrimaryLogPG.cc <<finish_promote>>
             dout(20) << __func__ << " filtered snaps " << results->snaps << dendl;
 939   9393  osd/PrimaryLogPG.cc <<finish_promote>>
             dout(20) << __func__
 940   9401  osd/PrimaryLogPG.cc <<finish_promote>>
             dout(10) << __func__ << " abort; will clean up partial work" << dendl;
 941   9411  osd/PrimaryLogPG.cc <<finish_promote>>
             dout(10) << __func__
 942   9446  osd/PrimaryLogPG.cc <<finish_promote>>
             dout(20) << __func__ << " took lock on obc, " << obc->rwstate << dendl;
 943   9457  osd/PrimaryLogPG.cc <<finish_promote>>
             dout(10) << __func__ << " whiteout " << soid << dendl;
 944   9497  osd/PrimaryLogPG.cc <<finish_promote>>
             dout(20) << __func__ << " creating whiteout on " << soid << dendl;
 945   9501  osd/PrimaryLogPG.cc <<finish_promote>>
             dout(10) << __func__ << " setting omap flag on " << soid << dendl;
 946   9544  osd/PrimaryLogPG.cc <<finish_promote>>
             dout(20) << __func__ << " new_snapset " << tctx->new_snapset << dendl;
 947   9552  osd/PrimaryLogPG.cc <<finish_promote>>
             dout(20) << __func__ << " took lock on obc, " << obc->rwstate << dendl;
 948   9569  osd/PrimaryLogPG.cc <<finish_promote_manifest>>
             dout(10) << __func__ << " " << soid << " r=" << r
 949   9896  osd/PrimaryLogPG.cc <<finish_flush>>
             dout(10) << __func__ << " " << oid << " tid " << tid
 950   9900  osd/PrimaryLogPG.cc <<finish_flush>>
             dout(10) << __func__ << " no flush_op found" << dendl;
 951   9905  osd/PrimaryLogPG.cc <<finish_flush>>
             dout(10) << __func__ << " tid " << tid << " != fop " << fop
 952   9921  osd/PrimaryLogPG.cc <<finish_flush>>
             dout(20) << __func__ << " requeueing dups" << dendl;
 953   9951  osd/PrimaryLogPG.cc <<try_flush_mark_clean>>
             dout(10) << __func__ << " flushed_version " << fop->flushed_version
 954   9955  osd/PrimaryLogPG.cc <<try_flush_mark_clean>>
             dout(10) << __func__ << " object no longer exists" << dendl;
 955   9958  osd/PrimaryLogPG.cc <<try_flush_mark_clean>>
             dout(20) << __func__ << " requeueing dups" << dendl;
 956   9976  osd/PrimaryLogPG.cc <<try_flush_mark_clean>>
             dout(10) << __func__ << " blocked by scrub" << dendl;
 957  10001  osd/PrimaryLogPG.cc <<try_flush_mark_clean>>
             dout(10) << __func__ << " clearing DIRTY flag for " << oid << dendl;
 958  10012  osd/PrimaryLogPG.cc <<try_flush_mark_clean>>
             dout(20) << __func__ << " took write lock" << dendl;
 959  10014  osd/PrimaryLogPG.cc <<try_flush_mark_clean>>
             dout(10) << __func__ << " waiting on write lock " << fop->op << " "
 960  10028  osd/PrimaryLogPG.cc <<try_flush_mark_clean>>
             dout(10) << __func__ << " failed write lock, no op; failing" << dendl;
 961  10074  osd/PrimaryLogPG.cc <<try_flush_mark_clean>>
             dout(20) << __func__ << " offset: " << p.second.offset
 962  10087  osd/PrimaryLogPG.cc <<try_flush_mark_clean>>
             dout(20) << __func__ << " requeueing for " << ctx->at_version << dendl;
 963  10173  osd/PrimaryLogPG.cc <<repop_all_committed>>
             dout(10) << __func__ << ": repop tid " << repop->rep_tid << " all committed "
 964  10187  osd/PrimaryLogPG.cc <<op_applied>>
             dout(10) << "op_applied version " << applied_version << dendl;
 965  10209  osd/PrimaryLogPG.cc <<eval_repop>>
             dout(10) << "eval_repop " << *repop << dendl;
 966  10211  osd/PrimaryLogPG.cc <<eval_repop>>
             dout(10) << "eval_repop " << *repop << " (no op)" << dendl;
 967  10215  osd/PrimaryLogPG.cc <<eval_repop>>
             dout(10) << " commit: " << *repop << dendl;
 968  10238  osd/PrimaryLogPG.cc <<eval_repop>>
             dout(10) << " removing " << *repop << dendl;
 969  10240  osd/PrimaryLogPG.cc <<eval_repop>>
             dout(20) << " q front is " << *repop_queue.front() << dendl;
 970  10261  osd/PrimaryLogPG.cc <<issue_repop>>
             dout(7) << "issue_repop rep_tid " << repop->rep_tid
 971  10319  osd/PrimaryLogPG.cc <<issue_repop>>
             dout(30) << __func__ << " missing_loc before: " << missing_loc.get_locations(soid) << dendl;
 972  10332  osd/PrimaryLogPG.cc <<issue_repop>>
             dout(30) << __func__ << " missing_loc after: " << missing_loc.get_locations(soid) << dendl;
 973  10354  osd/PrimaryLogPG.cc <<new_repop>>
             dout(10) << "new_repop rep_tid " << rep_tid << " on " << *ctx->op->get_req() << dendl;
 974  10356  osd/PrimaryLogPG.cc <<new_repop>>
             dout(10) << "new_repop rep_tid " << rep_tid << " (no op)" << dendl;
 975  10368  osd/PrimaryLogPG.cc <<new_repop>>
             dout(10) << __func__ << ": " << *repop << dendl;
 976  10400  osd/PrimaryLogPG.cc <<remove_repop>>
             dout(20) << __func__ << " " << *repop << dendl;
 977  10417  osd/PrimaryLogPG.cc <<simple_opc_create>>
             dout(20) << __func__ << " " << obc->obs.oi.soid << dendl;
 978  10429  osd/PrimaryLogPG.cc <<simple_opc_submit>>
             dout(20) << __func__ << " " << repop << dendl;
 979  10592  osd/PrimaryLogPG.cc <<check_blacklisted_watchers>>
             dout(20) << "PrimaryLogPG::check_blacklisted_watchers for pg " << get_pgid() << dendl;
 980  10600  osd/PrimaryLogPG.cc <<check_blacklisted_obc_watchers>>
             dout(20) << "PrimaryLogPG::check_blacklisted_obc_watchers for obc " << obc->obs.oi.soid << dendl;
 981  10607  osd/PrimaryLogPG.cc <<check_blacklisted_obc_watchers>>
             dout(30) << "watch: Found " << j->second->get_en... " cookie " << j->second->get_cookie() << dendl;
 982  10609  osd/PrimaryLogPG.cc <<check_blacklisted_obc_watchers>>
             dout(30) << "watch: Check entity_addr_t " << ea << dendl;
 983  10611  osd/PrimaryLogPG.cc <<check_blacklisted_obc_watchers>>
             dout(10) << "watch: Found blacklisted watcher for " << ea << dendl;
 984  10631  osd/PrimaryLogPG.cc <<populate_obc_watchers>>
             dout(10) << "populate_obc_watchers " << obc->obs.oi.soid << dendl;
 985  10640  osd/PrimaryLogPG.cc <<populate_obc_watchers>>
             dout(10) << " unconnected watcher " << p->first << " will expire " << expire << dendl;
 986  10658  osd/PrimaryLogPG.cc <<handle_watch_timeout>>
             dout(10) << "handle_watch_timeout obc " << obc << dendl;
 987  10661  osd/PrimaryLogPG.cc <<handle_watch_timeout>>
             dout(10) << "handle_watch_timeout not active, no-op" << dendl;
 988  10668  osd/PrimaryLogPG.cc <<handle_watch_timeout>>
             dout(10) << "handle_watch_timeout waiting for degraded on obj "
 989  10675  osd/PrimaryLogPG.cc <<handle_watch_timeout>>
             dout(10) << "handle_watch_timeout waiting for scrub on obj "
 990  10731  osd/PrimaryLogPG.cc <<create_object_context>>
             dout(10) << "create_object_context " << (void *)obc.get() << " " << oi.soid << " " << dendl;
 991  10887  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(10) << __func__ << " " << oid
 992  10900  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(10) << __func__ << " snap " << oid.snap << " is removed" << dendl;
 993  10906  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(20) << __func__ << " " << oid << " no snapset" << dendl;
 994  10915  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(10) << __func__ << " " << oid << " @" << oid.snap
 995  10921  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(10) << __func__ << " " << oid << " @" << oid.snap
 996  10933  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(10) << __func__ << " " << oid << " @" << oid.snap
 997  10940  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(10) << __func__ << " " << oid << " @" << oid.snap
 998  10945  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(10) << __func__ << " " << oid << " @" << oid.snap
 999  10956  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(10) << __func__ << " " << oid << " @" << oid.snap
1000  10964  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(10) << __func__ << " " << oid << " @" << oid.snap
1001  10974  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(10) << __func__ << " " << oid << " @" << oid.snap
1002  10980  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(10) << __func__ << " " << head
1003  11000  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(10) << __func__ << " no clones with last >= oid.snap "
1004  11009  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(20) << __func__ << " " << soid << " missing, try again later"
1005  11023  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(20) << __func__ << " clone is degraded or backfilling " << soid << dendl;
1006  11026  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(20) << __func__ << " clone is recovering " << soid << dendl;
1007  11029  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(20) << __func__ << " missing clone " << soid << dendl;
1008  11043  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(20) << __func__ << " " << soid
1009  11050  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(1) << __func__ << " " << soid << " empty snapset -- DNE" << dendl;
1010  11057  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(20) << __func__ << " " << soid << " [" << first << "," << last
1011  11062  osd/PrimaryLogPG.cc <<find_object_context>>
             dout(20) << __func__ << " " << soid << " [" << first << "," << last
1012  11078  osd/PrimaryLogPG.cc <<add_object_context_to_pg_stat>>
             dout(10) << __func__ << " " << oi.soid << dendl;
1013  11113  osd/PrimaryLogPG.cc <<kick_object_context_blocked>>
             dout(10) << __func__ << " " << soid << " still blocked" << dendl;
1014  11120  osd/PrimaryLogPG.cc <<kick_object_context_blocked>>
             dout(10) << __func__ << " " << soid << " requeuing " << ls.size() << " requests" << dendl;
1015  11213  osd/PrimaryLogPG.cc <<recover_missing>>
             dout(7) << __func__ << " " << soid
1016  11233  osd/PrimaryLogPG.cc <<recover_missing>>
             dout(20) << __func__ << ": soid " << soid << " needs to be deleted from replica " << shard << dendl;1017  11261  osd/PrimaryLogPG.cc <<recover_missing>>
             dout(10) << " missing but already recovering head " << head << dendl;
1018  11295  osd/PrimaryLogPG.cc <<remove_missing_object>>
             dout(20) << __func__ << " " << soid << " " << v << dendl;
1019  11327  osd/PrimaryLogPG.cc <<finish_degraded_object>>
             dout(10) << __func__ << " " << oid << dendl;
1020  11350  osd/PrimaryLogPG.cc <<_committed_pushed_object>>
             dout(10) << __func__ << " last_complete " << last_complete << " now ondisk" << dendl;
1021  11370  osd/PrimaryLogPG.cc <<_committed_pushed_object>>
             dout(10) << __func__ << " pg has changed, not touching last_complete_ondisk" << dendl;
1022  11378  osd/PrimaryLogPG.cc <<_applied_recovered_object>>
             dout(20) << __func__ << dendl;
1023  11380  osd/PrimaryLogPG.cc <<_applied_recovered_object>>
             dout(20) << "obc = " << *obc << dendl;
1024  11394  osd/PrimaryLogPG.cc <<_applied_recovered_object_replica>>
             dout(20) << __func__ << dendl;
1025  11417  osd/PrimaryLogPG.cc <<recover_got>>
             dout(10) << "got missing " << oid << " v " << v << dendl;
1026  11420  osd/PrimaryLogPG.cc <<recover_got>>
             dout(10) << "last_complete now " << info.last_complete
1027  11424  osd/PrimaryLogPG.cc <<recover_got>>
             dout(10) << "last_complete now " << info.last_complete
1028  11464  osd/PrimaryLogPG.cc <<pick_newest_available>>
             dout(10) << "pick_newest_available " << oid << "... on osd." << osd->whoami << " (local)" << dendl;
1029  11476  osd/PrimaryLogPG.cc <<pick_newest_available>>
             dout(10) << "pick_newest_available " << oid << " " << h << " on osd." << peer << dendl;
1030  11481  osd/PrimaryLogPG.cc <<pick_newest_available>>
             dout(10) << "pick_newest_available " << oid << " " << v << " (newest)" << dendl;
1031  11497  osd/PrimaryLogPG.cc <<do_update_log_missing>>
             dout(20) << __func__ << " op_trim_to = " << op_t...l_forward_to = " << op_roll_forward_to << dendl;
1032  11550  osd/PrimaryLogPG.cc <<do_update_log_missing_reply>>
             dout(20) << __func__ << " got reply from "
1033  11585  osd/PrimaryLogPG.cc <<mark_all_unfound_lost>>
             dout(3) << __func__ << " " << pg_log_entry_t::get_op_name(what) << dendl;
1034  11588  osd/PrimaryLogPG.cc <<mark_all_unfound_lost>>
             dout(30) << __func__ << ": log before:\n";
1035  11630  osd/PrimaryLogPG.cc <<mark_all_unfound_lost>>
             dout(10) << e << dendl;
1036  11649  osd/PrimaryLogPG.cc <<mark_all_unfound_lost>>
             dout(10) << e << dendl;
1037  11708  osd/PrimaryLogPG.cc <<mark_all_unfound_lost>>
             dout(0) << "do_command r=" << 0 << " " << rs << dendl;
1038  11736  osd/PrimaryLogPG.cc <<apply_and_flush_repops>>
             dout(10) << " canceling repop tid " << repop->rep_tid << dendl;
1039  11743  osd/PrimaryLogPG.cc <<apply_and_flush_repops>>
             dout(10) << " requeuing " << *repop->op->get_req() << dendl;
1040  11752  osd/PrimaryLogPG.cc <<apply_and_flush_repops>>
             dout(10) << " also requeuing ondisk waiters " << p->second << dendl;
1041  11808  osd/PrimaryLogPG.cc <<on_removal>>
             dout(10) << __func__ << dendl;
1042  11824  osd/PrimaryLogPG.cc <<clear_async_reads>>
             dout(10) << __func__ << dendl;
1043  11826  osd/PrimaryLogPG.cc <<clear_async_reads>>
             dout(10) << "clear ctx: "
1044  11836  osd/PrimaryLogPG.cc <<on_shutdown>>
             dout(10) << __func__ << dendl;
1045  11882  osd/PrimaryLogPG.cc <<on_activate>>
             dout(10) << "activate not all replicas are up-to-date, queueing recovery" << dendl;
1046  11890  osd/PrimaryLogPG.cc <<on_activate>>
             dout(10) << "activate queueing backfill" << dendl;
1047  11898  osd/PrimaryLogPG.cc <<on_activate>>
             dout(10) << "activate all replicas clean, no recovery" << dendl;
1048  11914  osd/PrimaryLogPG.cc <<on_activate>>
             dout(5) << __func__ << ": bft=" << backfill_targets
1049  11919  osd/PrimaryLogPG.cc <<on_activate>>
             dout(5) << "target shard " << *i
1050  11931  osd/PrimaryLogPG.cc <<_on_new_interval>>
             dout(20) << __func__ << " checking missing set d...g. missing = " << pg_log.get_missing() << dendl;
1051  11941  osd/PrimaryLogPG.cc <<on_change>>
             dout(10) << __func__ << dendl;
1052  11944  osd/PrimaryLogPG.cc <<on_change>>
             dout(20) << " discarding empty hit_set" << dendl;
1053  12051  osd/PrimaryLogPG.cc <<on_role_change>>
             dout(10) << __func__ << dendl;
1054  12053  osd/PrimaryLogPG.cc <<on_role_change>>
             dout(10) << " clearing hit set" << dendl;
1055  12060  osd/PrimaryLogPG.cc <<on_pool_change>>
             dout(10) << __func__ << dendl;
1056  12068  osd/PrimaryLogPG.cc <<on_pool_change>>
             dout(10) << __func__ << " requeuing full waiters (not in writeback) "
1057  12108  osd/PrimaryLogPG.cc <<cancel_pull>>
             dout(20) << __func__ << ": " << soid << dendl;
1058  12120  osd/PrimaryLogPG.cc <<cancel_pull>>
             dout(20) << " kicking degraded waiters on " << soid << dendl;
1059  12125  osd/PrimaryLogPG.cc <<cancel_pull>>
             dout(20) << " kicking unreadable waiters on " << soid << dendl;
1060  12147  osd/PrimaryLogPG.cc <<check_recovery_sources>>
             dout(10) << "peer_log_requested removing " << *i << dendl;
1061  12158  osd/PrimaryLogPG.cc <<check_recovery_sources>>
             dout(10) << "peer_missing_requested removing " << *i << dendl;
1062  12186  osd/PrimaryLogPG.cc <<start_recovery_ops>>
             dout(10) << "recovery raced and were queued twice, ignoring!" << dendl;
1063  12223  osd/PrimaryLogPG.cc <<start_recovery_ops>>
             dout(10) << "deferring backfill due to NOBACKFILL" << dendl;
1064  12227  osd/PrimaryLogPG.cc <<start_recovery_ops>>
             dout(10) << "deferring backfill due to NOREBALANCE" << dendl;
1065  12230  osd/PrimaryLogPG.cc <<start_recovery_ops>>
             dout(10) << "deferring backfill due to !backfill_reserved" << dendl;
1066  12232  osd/PrimaryLogPG.cc <<start_recovery_ops>>
             dout(10) << "queueing RequestBackfill" << dendl;
1067  12247  osd/PrimaryLogPG.cc <<start_recovery_ops>>
             dout(10) << " started " << started << dendl;
1068  12257  osd/PrimaryLogPG.cc <<start_recovery_ops>>
             dout(10) << __func__ << " needs_recovery: "
1069  12260  osd/PrimaryLogPG.cc <<start_recovery_ops>>
             dout(10) << __func__ << " missing_loc: "
1070  12265  osd/PrimaryLogPG.cc <<start_recovery_ops>>
             dout(10) << " still have " << unfound << " unfound" << dendl;
1071  12288  osd/PrimaryLogPG.cc <<start_recovery_ops>>
             dout(10) << "recovery done, queuing backfill" << dendl;
1072  12296  osd/PrimaryLogPG.cc <<start_recovery_ops>>
             dout(10) << "recovery done, no backfill" << dendl;
1073  12310  osd/PrimaryLogPG.cc <<start_recovery_ops>>
             dout(10) << "recovery done, backfill done" << dendl;
1074  12333  osd/PrimaryLogPG.cc <<recover_primary>>
             dout(10) << __func__ << " recovering " << recovering.size()
1075  12337  osd/PrimaryLogPG.cc <<recover_primary>>
             dout(25) << __func__ << " " << missing.get_items() << dendl;
1076  12368  osd/PrimaryLogPG.cc <<recover_primary>>
             dout(10) << __func__ << " "
1077  12393  osd/PrimaryLogPG.cc <<recover_primary>>
             dout(10) << " already reverting " << soid << dendl;
1078  12395  osd/PrimaryLogPG.cc <<recover_primary>>
             dout(10) << " reverting " << soid << " to " << latest->prior_version << dendl;
1079  12432  osd/PrimaryLogPG.cc <<recover_primary>>
             dout(10) << " need to pull prior_version " << alternate_need << " for revert " << item << dendl;
1080  12441  osd/PrimaryLogPG.cc <<recover_primary>>
             dout(10) << " will pull " << alternate_need << " or " << need
1081  12497  osd/PrimaryLogPG.cc <<primary_error>>
             dout(10) << info.pgid << " unexpectedly missing " << soid << " v" << v
1082  12516  osd/PrimaryLogPG.cc <<prep_object_replica_deletes>>
             dout(10) << __func__ << ": on " << soid << dendl;
1083  12521  osd/PrimaryLogPG.cc <<prep_object_replica_deletes>>
             dout(20) << "replica delete delayed on " << soid
1084  12526  osd/PrimaryLogPG.cc <<prep_object_replica_deletes>>
             dout(20) << "replica delete got recovery read lock on " << soid
1085  12548  osd/PrimaryLogPG.cc <<prep_object_replica_pushes>>
             dout(10) << __func__ << ": on " << soid << dendl;
1086  12558  osd/PrimaryLogPG.cc <<prep_object_replica_pushes>>
             dout(20) << "recovery delayed on " << soid
1087  12563  osd/PrimaryLogPG.cc <<prep_object_replica_pushes>>
             dout(20) << "recovery got recovery read lock on " << soid
1088  12583  osd/PrimaryLogPG.cc <<prep_object_replica_pushes>>
             dout(0) << __func__ << " Error " << r << " on oid " << soid << dendl;
1089  12594  osd/PrimaryLogPG.cc <<recover_replicas>>
             dout(10) << __func__ << "(" << max << ")" << dendl;
1090  12632  osd/PrimaryLogPG.cc <<recover_replicas>>
             dout(10) << " peer osd." << peer << " missing " << m_sz << " objects." << dendl;
1091  12633  osd/PrimaryLogPG.cc <<recover_replicas>>
             dout(20) << " peer osd." << peer << " missing " << pm->second.get_items() << dendl;
1092  12644  osd/PrimaryLogPG.cc <<recover_replicas>>
             dout(10) << __func__ << ": " << soid << " still unfound" << dendl;
1093  12659  osd/PrimaryLogPG.cc <<recover_replicas>>
             dout(10) << __func__ << ": already recovering " << soid << dendl;
1094  12664  osd/PrimaryLogPG.cc <<recover_replicas>>
             dout(10) << __func__ << ": " << soid << " is a delete, removing" << dendl;
1095  12671  osd/PrimaryLogPG.cc <<recover_replicas>>
             dout(10) << __func__ << ": " << soid.get_head()
1096  12677  osd/PrimaryLogPG.cc <<recover_replicas>>
             dout(10) << __func__ << ": " << soid << " still missing on primary" << dendl;
1097  12681  osd/PrimaryLogPG.cc <<recover_replicas>>
             dout(10) << __func__ << ": recover_object_replicas(" << soid << ")" << dendl;
1098  12759  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(10) << __func__ << " (" << max << ")"
1099  12787  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(10) << "peer osd." << *i
1100  12822  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(20) << " my backfill interval " << backfill_info << dendl;
1101  12831  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(20) << " peer shard " << bt << " backfill " << pbi << dendl;
1102  12834  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(10) << " scanning peer osd." << bt << " from " << pbi.end << dendl;
1103  12855  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(10) << " reached end for both local and all peers" << dendl;
1104  12876  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(20) << " BACKFILL removing " << check
1105  12926  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(20) << " BACKFILL keeping " << check
1106  12936  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(20) << " BACKFILL replacing " << check
1107  12941  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(20) << " BACKFILL pushing " << backfill_info.begin
1108  12952  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(0) << __func__ << " Error " << r << " trying to backfill " << backfill_info.begin << dendl;
1109  12958  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(20) << "backfill blocking on " << backfill_info.begin
1110  12963  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(20) << "need_ver_targs=" << need_ver_targs
1111  12965  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(20) << "backfill_targets=" << backfill_targets
1112  13023  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(5) << "backfill_pos is " << backfill_pos << dendl;
1113  13027  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(20) << *i << " is still in flight" << dendl;
1114  13033  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(10) << "starting new_last_backfill at " << new_last_backfill << dendl;
1115  13039  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(20) << " pending_backfill_update " << i->first << dendl;
1116  13052  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(10) << "possible new_last_backfill at " << new_last_backfill << dendl;
1117  13062  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(10) << "final new_last_backfill at " << new_last_backfill << dendl;
1118  13100  osd/PrimaryLogPG.cc <<recover_backfill>>
             dout(10) << " peer " << bt
1119  13157  osd/PrimaryLogPG.cc <<update_range>>
             dout(10) << __func__<< ": bi is old, rescanning local backfill_info"
1120  13164  osd/PrimaryLogPG.cc <<update_range>>
             dout(10) << __func__<< ": bi is current " << dendl;
1121  13178  osd/PrimaryLogPG.cc <<update_range>>
             dout(10) << __func__<< ": bi is old, (" << bi->version
1122  13183  osd/PrimaryLogPG.cc <<update_range>>
             dout(10) << __func__ << ": updating from version " << e.version
1123  13189  osd/PrimaryLogPG.cc <<update_range>>
             dout(10) << __func__ << ": " << e.soid << " updated to version "
1124  13197  osd/PrimaryLogPG.cc <<update_range>>
             dout(10) << __func__ << ": " << e.soid << " removed" << dendl;
1125  13202  osd/PrimaryLogPG.cc <<update_range>>
             dout(10) << "scanning pg log first" << dendl;
1126  13204  osd/PrimaryLogPG.cc <<update_range>>
             dout(10) << "scanning projected log" << dendl;
1127  13217  osd/PrimaryLogPG.cc <<scan_range>>
             dout(10) << "scan_range from " << bi->begin << dendl;
1128  13224  osd/PrimaryLogPG.cc <<scan_range>>
             dout(10) << " got " << ls.size() << " items, next " << bi->end << dendl;
1129  13225  osd/PrimaryLogPG.cc <<scan_range>>
             dout(20) << ls << dendl;
1130  13234  osd/PrimaryLogPG.cc <<scan_range>>
             dout(20) << " " << *p << " " << obc->obs.oi.version << dendl;
1131  13249  osd/PrimaryLogPG.cc <<scan_range>>
             dout(20) << " " << *p << " " << oi.version << dendl;
1132  13261  osd/PrimaryLogPG.cc <<check_local>>
             dout(10) << __func__ << dendl;
1133  13278  osd/PrimaryLogPG.cc <<check_local>>
             dout(10) << " checking " << p->soid
1134  13308  osd/PrimaryLogPG.cc <<get_hit_set_current_object>>
             dout(20) << __func__ << " " << hoid << dendl;
1135  13328  osd/PrimaryLogPG.cc <<get_hit_set_archive_object>>
             dout(20) << __func__ << " " << hoid << dendl;
1136  13334  osd/PrimaryLogPG.cc <<hit_set_clear>>
             dout(20) << __func__ << dendl;
1137  13410  osd/PrimaryLogPG.cc <<hit_set_create>>
             dout(20) << __func__ << " " << params << dendl;
1138  13425  osd/PrimaryLogPG.cc <<hit_set_create>>
             dout(20) << __func__ << " previous set had approx " << unique
1139  13440  osd/PrimaryLogPG.cc <<hit_set_create>>
             dout(10) << __func__ << " target_size " << p->target_size
1140  13461  osd/PrimaryLogPG.cc <<hit_set_apply_log>>
             dout(20) << __func__ << " no update" << dendl;
1141  13465  osd/PrimaryLogPG.cc <<hit_set_apply_log>>
             dout(20) << __func__ << " " << to << " .. " << info.last_update << dendl;
1142  13479  osd/PrimaryLogPG.cc <<hit_set_persist>>
             dout(10) << __func__ << dendl;
1143  13513  osd/PrimaryLogPG.cc <<hit_set_persist>>
             dout(10) << __func__ << " backfill target osd." << *p
1144  13535  osd/PrimaryLogPG.cc <<hit_set_persist>>
             dout(20) << __func__ << " archive " << oid << dendl;
1145  13619  osd/PrimaryLogPG.cc <<hit_set_trim>>
             dout(20) << __func__ << " removing " << oid << dendl;
1146  13676  osd/PrimaryLogPG.cc <<agent_setup>>
             dout(10) << __func__ << " allocated new state, position "
1147  13679  osd/PrimaryLogPG.cc <<agent_setup>>
             dout(10) << __func__ << " keeping existing state" << dendl;
1148  13700  osd/PrimaryLogPG.cc <<agent_work>>
             dout(10) << __func__ << " no agent state, stopping" << dendl;
1149  13708  osd/PrimaryLogPG.cc <<agent_work>>
             dout(10) << __func__ << " idle, stopping" << dendl;
1150  13715  osd/PrimaryLogPG.cc <<agent_work>>
             dout(10) << __func__
1151  13742  osd/PrimaryLogPG.cc <<agent_work>>
             dout(20) << __func__ << " got " << ls.size() << " objects" << dendl;
1152  13748  osd/PrimaryLogPG.cc <<agent_work>>
             dout(20) << __func__ << " skip (hit set) " << *p << dendl;
1153  13753  osd/PrimaryLogPG.cc <<agent_work>>
             dout(20) << __func__ << " skip (degraded) " << *p << dendl;
1154  13758  osd/PrimaryLogPG.cc <<agent_work>>
             dout(20) << __func__ << " skip (missing head) " << *p << dendl;
1155  13765  osd/PrimaryLogPG.cc <<agent_work>>
             dout(20) << __func__ << " skip (no obc) " << *p << dendl;
1156  13770  osd/PrimaryLogPG.cc <<agent_work>>
             dout(20) << __func__ << " skip (dne) " << obc->obs.oi.soid << dendl;
1157  13776  osd/PrimaryLogPG.cc <<agent_work>>
             dout(20) << __func__ << " skip (scrubbing) " << obc->obs.oi << dendl;
1158  13781  osd/PrimaryLogPG.cc <<agent_work>>
             dout(20) << __func__ << " skip (blocked) " << obc->obs.oi << dendl;
1159  13786  osd/PrimaryLogPG.cc <<agent_work>>
             dout(20) << __func__ << " skip (request pending) " << obc->obs.oi << dendl;
1160  13794  osd/PrimaryLogPG.cc <<agent_work>>
             dout(20) << __func__ << " skip (omap to EC) " << obc->obs.oi << dendl;
1161  13816  osd/PrimaryLogPG.cc <<agent_work>>
             dout(20) << __func__ << " resetting atime and temp histograms" << dendl;
1162  13825  osd/PrimaryLogPG.cc <<agent_work>>
             dout(20) << __func__ << " start pos " << agent_state->position
1163  13834  osd/PrimaryLogPG.cc <<agent_work>>
             dout(20) << __func__ << " wrap around " << agent_state->start << dendl;
1164  13870  osd/PrimaryLogPG.cc <<agent_load_hit_sets>>
             dout(10) << __func__ << dendl;
1165  13874  osd/PrimaryLogPG.cc <<agent_load_hit_sets>>
             dout(10) << __func__ << " loading " << p->begin << "-"
1166  13884  osd/PrimaryLogPG.cc <<agent_load_hit_sets>>
             dout(10) << __func__ << " unreadable " << oid << ", waiting" << dendl;
1167  13911  osd/PrimaryLogPG.cc <<agent_maybe_flush>>
             dout(20) << __func__ << " skip (clean) " << obc->obs.oi << dendl;
1168  13916  osd/PrimaryLogPG.cc <<agent_maybe_flush>>
             dout(20) << __func__ << " skip (cache_pinned) " << obc->obs.oi << dendl;
1169  13933  osd/PrimaryLogPG.cc <<agent_maybe_flush>>
             dout(20) << __func__ << " skip (too young) " << obc->obs.oi << dendl;
1170  13939  osd/PrimaryLogPG.cc <<agent_maybe_flush>>
             dout(20) << __func__ << " skip (flushing) " << obc->obs.oi << dendl;
1171  13944  osd/PrimaryLogPG.cc <<agent_maybe_flush>>
             dout(10) << __func__ << " flushing " << obc->obs.oi << dendl;
1172  13961  osd/PrimaryLogPG.cc <<agent_maybe_flush>>
             dout(10) << __func__ << " start_flush() failed " << obc->obs.oi
1173  13975  osd/PrimaryLogPG.cc <<agent_maybe_evict>>
             dout(20) << __func__ << " skip (dirty) " << obc->obs.oi << dendl;
1174  13979  osd/PrimaryLogPG.cc <<agent_maybe_evict>>
             dout(20) << __func__ << " skip (watchers) " << obc->obs.oi << dendl;
1175  13983  osd/PrimaryLogPG.cc <<agent_maybe_evict>>
             dout(20) << __func__ << " skip (blocked) " << obc->obs.oi << dendl;
1176  13987  osd/PrimaryLogPG.cc <<agent_maybe_evict>>
             dout(20) << __func__ << " skip (cache_pinned) " << obc->obs.oi << dendl;
1177  13994  osd/PrimaryLogPG.cc <<agent_maybe_evict>>
             dout(20) << __func__ << " skip (clones) " << obc->obs.oi << dendl;
1178  14009  osd/PrimaryLogPG.cc <<agent_maybe_evict>>
             dout(20) << __func__ << " skip (too young) " << obc->obs.oi << dendl;
1179  14021  osd/PrimaryLogPG.cc <<agent_maybe_evict>>
             dout(20) << __func__
1180  14026  osd/PrimaryLogPG.cc <<agent_maybe_evict>>
             dout(30) << "agent_state:\n";
1181  14039  osd/PrimaryLogPG.cc <<agent_maybe_evict>>
             dout(10) << __func__ << " evicting " << obc->obs.oi << dendl;
1182  14049  osd/PrimaryLogPG.cc <<agent_maybe_evict>>
             dout(20) << __func__ << " skip (cannot get lock) " << obc->obs.oi << dendl;
1183  14078  osd/PrimaryLogPG.cc <<agent_stop>>
             dout(20) << __func__ << dendl;
1184  14088  osd/PrimaryLogPG.cc <<agent_delay>>
             dout(20) << __func__ << dendl;
1185  14098  osd/PrimaryLogPG.cc <<agent_choose_mode_restart>>
             dout(20) << __func__ << dendl;
1186  14112  osd/PrimaryLogPG.cc <<agent_choose_mode>>
             dout(20) << __func__ << " " << this << " delaying, ignored" << dendl;
1187  14122  osd/PrimaryLogPG.cc <<agent_choose_mode>>
             dout(20) << __func__ << " stats invalid (post-split), idle" << dendl;
1188  14162  osd/PrimaryLogPG.cc <<agent_choose_mode>>
             dout(10) << __func__
1189  14203  osd/PrimaryLogPG.cc <<agent_choose_mode>>
             dout(20) << __func__ << " dirty " << ((float )dirty_micro / 1000000.0)
1190  14254  osd/PrimaryLogPG.cc <<agent_choose_mode>>
             dout(30) << __func__ << " evict_effort " << was ... by " << inc << " to " << evict_effort << dendl;
1191  14261  osd/PrimaryLogPG.cc <<agent_choose_mode>>
             dout(5) << __func__ << " flush_mode "
1192  14281  osd/PrimaryLogPG.cc <<agent_choose_mode>>
             dout(5) << __func__ << " evict_mode "
1193  14311  osd/PrimaryLogPG.cc <<agent_choose_mode>>
             dout(5) << __func__ << " evict_effort "
1194  14359  osd/PrimaryLogPG.cc <<already_complete>>
             dout(20) << __func__ << ": " << v << dendl;
1195  14363  osd/PrimaryLogPG.cc <<already_complete>>
             dout(20) << __func__ << ": " << **i << dendl;
1196  14366  osd/PrimaryLogPG.cc <<already_complete>>
             dout(20) << __func__ << ": " << **i
1197  14371  osd/PrimaryLogPG.cc <<already_complete>>
             dout(20) << __func__ << ": " << **i
1198  14376  osd/PrimaryLogPG.cc <<already_complete>>
             dout(20) << __func__ << ": " << **i
1199  14382  osd/PrimaryLogPG.cc <<already_complete>>
             dout(20) << __func__ << ": returning true" << dendl;
1200  14388  osd/PrimaryLogPG.cc <<already_ack>>
             dout(20) << __func__ << ": " << v << dendl;
1201  14394  osd/PrimaryLogPG.cc <<already_ack>>
             dout(20) << __func__ << ": " << **i
1202  14399  osd/PrimaryLogPG.cc <<already_ack>>
             dout(20) << __func__ << ": " << **i
1203  14404  osd/PrimaryLogPG.cc <<already_ack>>
             dout(20) << __func__ << ": returning true" << dendl;
1204  14423  osd/PrimaryLogPG.cc <<_range_available_for_scrub>>
             dout(10) << __func__ << ": scrub delayed, "
1205  14867  osd/PrimaryLogPG.cc <<_scrub_finish>>
             dout(10) << mode << " got "
1206  14938  osd/PrimaryLogPG.cc <<rep_repair_primary_object>>
             dout(10) << __func__ << " " << soid
1207  14953  osd/PrimaryLogPG.cc <<rep_repair_primary_object>>
             dout(0) << __func__ << ": Need version of replica, objects_get_attr failed: "
1208  14962  osd/PrimaryLogPG.cc <<rep_repair_primary_object>>
             dout(0) << __func__ << ": Need version of replica, bad object_info_t: " << soid << dendl;
1209  14967  osd/PrimaryLogPG.cc <<rep_repair_primary_object>>
             dout(0) << __func__ << " No other replicas available for " << soid << dendl;
1210  14993  osd/PrimaryLogPG.cc <<rep_repair_primary_object>>
             dout(5) << __func__<< ": Read error on " << soid << ", but already seen errors" << dendl;
1211    128  osd/ReplicatedBackend.cc <<recover_object>>
             dout(10) << __func__ << ": " << hoid << dendl;
1212    158  osd/ReplicatedBackend.cc <<check_recovery_sources>>
             dout(10) << "check_recovery_sources resetting pulls from osd." << i->first
1213    175  osd/ReplicatedBackend.cc <<can_handle_while_inactive>>
             dout(10) << __func__ << ": " << op << dendl;
1214    188  osd/ReplicatedBackend.cc <<_handle_message>>
             dout(10) << __func__ << ": " << op << dendl;
1215    237  osd/ReplicatedBackend.cc <<on_change>>
             dout(10) << __func__ << dendl;
1216    511  osd/ReplicatedBackend.cc <<op_commit>>
             dout(10) << __func__ << ": " << op->tid << dendl;
1217    547  osd/ReplicatedBackend.cc <<do_repop_reply>>
             dout(7) << __func__ << ": tid " << ip_op.tid << " op "
1218    552  osd/ReplicatedBackend.cc <<do_repop_reply>>
             dout(7) << __func__ << ": tid " << ip_op.tid << " (no op) "
1219    591  osd/ReplicatedBackend.cc <<be_deep_scrub>>
             dout(10) << __func__ << " " << poid << " pos " << pos << dendl;
1220    621  osd/ReplicatedBackend.cc <<be_deep_scrub>>
             dout(20) << __func__ << " " << poid << " got "
1221    631  osd/ReplicatedBackend.cc <<be_deep_scrub>>
             dout(20) << __func__ << " " << poid << " more data, digest so far 0x"
1222    641  osd/ReplicatedBackend.cc <<be_deep_scrub>>
             dout(20) << __func__ << " " << poid << " done with data, digest 0x"
1223    656  osd/ReplicatedBackend.cc <<be_deep_scrub>>
             dout(20) << __func__ << " " << poid << " got "
1224    662  osd/ReplicatedBackend.cc <<be_deep_scrub>>
             dout(25) << "CRC header " << string(hdrbl.c_str(), hdrbl.length())
1225    697  osd/ReplicatedBackend.cc <<be_deep_scrub>>
             dout(25) << __func__ << " " << poid
1226    708  osd/ReplicatedBackend.cc <<be_deep_scrub>>
             dout(25) << __func__ << " " << poid
1227    719  osd/ReplicatedBackend.cc <<be_deep_scrub>>
             dout(20) << __func__ << " done with " << poid << " omap_digest "
1228    737  osd/ReplicatedBackend.cc <<_do_push>>
             dout(10) << __func__ << " Out of space (failsafe) processing push request." << dendl;
1229    802  osd/ReplicatedBackend.cc <<_do_pull_response>>
             dout(10) << __func__ << " Out of space (failsafe) processing pull response (push)." << dendl;
1230    998  osd/ReplicatedBackend.cc <<do_repop>>
             dout(10) << __func__ << " " << soid
1231   1007  osd/ReplicatedBackend.cc <<do_repop>>
             dout(30) << __func__ << " missing before " << ge...)->get_log().get_missing().get_items() << dendl;
1232   1028  osd/ReplicatedBackend.cc <<do_repop>>
             dout(20) << __func__ << " start tracking temp " << m->new_temp_oid << dendl;
1233   1032  osd/ReplicatedBackend.cc <<do_repop>>
             dout(20) << __func__ << " stop tracking temp " << m->discard_temp_oid << dendl;
1234   1034  osd/ReplicatedBackend.cc <<do_repop>>
             dout(10) << __func__ << ": removing object " << m->discard_temp_oid
1235   1056  osd/ReplicatedBackend.cc <<do_repop>>
             dout(30) << __func__ << " is_missing " << pmissing.is_missing(soid) << dendl;
1236   1058  osd/ReplicatedBackend.cc <<do_repop>>
             dout(30) << " add_next_event entry " << e << dendl;
1237   1060  osd/ReplicatedBackend.cc <<do_repop>>
             dout(30) << " entry is_delete " << e.is_delete() << dendl;
1238   1082  osd/ReplicatedBackend.cc <<do_repop>>
             dout(30) << __func__ << " missing after" << get_...)->get_log().get_missing().get_items() << dendl;
1239   1094  osd/ReplicatedBackend.cc <<repop_commit>>
             dout(10) << __func__ << " on op " << *m
1240   1296  osd/ReplicatedBackend.cc <<prepare_pull>>
             dout(7) << "pull " << soid
1241   1306  osd/ReplicatedBackend.cc <<prepare_pull>>
             dout(10) << "pulling soid " << soid << " from osd " << fromshard
1242   1327  osd/ReplicatedBackend.cc <<prepare_pull>>
             dout(10) << " snapset " << ssc->snapset << dendl;
1243   1336  osd/ReplicatedBackend.cc <<prepare_pull>>
             dout(10) << " pulling " << recovery_info << dendl;
1244   1382  osd/ReplicatedBackend.cc <<prep_push_to_replica>>
             dout(10) << __func__ << ": " << soid << " v" << oi.version
1245   1397  osd/ReplicatedBackend.cc <<prep_push_to_replica>>
             dout(15) << "push_to_replica missing head " << head << ", pushing raw clone" << dendl;
1246   1403  osd/ReplicatedBackend.cc <<prep_push_to_replica>>
             dout(15) << "push_to_replica snapset is " << ssc->snapset << dendl;
1247   1422  osd/ReplicatedBackend.cc <<prep_push_to_replica>>
             dout(15) << "push_to_replica snapset is " << ssc->snapset << dendl;
1248   1575  osd/ReplicatedBackend.cc <<submit_push_complete>>
             dout(15) << " clone_range " << p->first << " "
1249   1713  osd/ReplicatedBackend.cc <<handle_push>>
             dout(10) << "handle_push "
1250   1818  osd/ReplicatedBackend.cc <<build_push_op>>
             dout(7) << __func__ << " " << recovery_info.soid
1251   1828  osd/ReplicatedBackend.cc <<build_push_op>>
             dout(1) << __func__ << " get omap header failed: " << cpp_strerror(-r) << dendl;
1252   1833  osd/ReplicatedBackend.cc <<build_push_op>>
             dout(1) << __func__ << " getattrs failed: " << cpp_strerror(-r) << dendl;
1253   1844  osd/ReplicatedBackend.cc <<build_push_op>>
             dout(0) << __func__ << ": bad object_info_t: " << recovery_info.soid << dendl;
1254   1927  osd/ReplicatedBackend.cc <<build_push_op>>
             dout(0) << __func__ << ": inject EIO " << recovery_info.soid << dendl;
1255   1934  osd/ReplicatedBackend.cc <<build_push_op>>
             dout(10) << " extent " << p.get_start() << "~" << p.get_len()
1256   1989  osd/ReplicatedBackend.cc <<handle_push_reply>>
             dout(10) << "huh, i wasn't pushing " << soid << " to osd." << peer
1257   1994  osd/ReplicatedBackend.cc <<handle_push_reply>>
             dout(10) << "huh, i wasn't pushing " << soid << " to osd." << peer
1258   2002  osd/ReplicatedBackend.cc <<handle_push_reply>>
             dout(10) << " pushing more from, "
1259   2013  osd/ReplicatedBackend.cc <<handle_push_reply>>
             dout(5) << __func__ << ": oid " << soid << " error " << r << dendl;
1260   2043  osd/ReplicatedBackend.cc <<handle_push_reply>>
             dout(10) << "pushed " << soid << ", still waiting for push ack from "
1261   2125  osd/ReplicatedBackend.cc <<_failed_pull>>
             dout(20) << __func__ << ": " << soid << " from " << from << dendl;
1262   2159  osd/ReplicatedBackend.cc <<start_pushes>>
             dout(20) << __func__ << " soid " << soid << dendl;
1263   2188  osd/ReplicatedBackend.cc <<start_pushes>>
             dout(10) << __func__ << " clean up peer " << p << dendl;
1264     50  osd/Session.cc <<ack_backoff>>
             dout(20) << __func__ << " " << pgid << " " << id << " [" << begin << ","
1265     56  osd/Session.cc <<ack_backoff>>
             dout(20) << __func__ << " " << pgid << " " << id << " [" << begin << ","
1266     65  osd/Session.cc <<ack_backoff>>
             dout(20) << __func__ << " now " << *b << dendl;
1267     67  osd/Session.cc <<ack_backoff>>
             dout(20) << __func__ << " deleting " << *b << dendl;
1268     75  osd/Session.cc <<ack_backoff>>
             dout(20) << __func__ << " clearing begin bin " << q->first << dendl;
1269     78  osd/Session.cc <<ack_backoff>>
             dout(20) << __func__ << " clearing pg bin " << p->first << dendl;
1270     90  osd/Session.cc <<check_backoff>>
             dout(10) << __func__ << " session " << this << " has backoff " << *b
1271     99  osd/Session.cc <<check_backoff>>
             dout(10) << __func__ << " session " << this << " disconnected" << dendl;
1272    158  osd/SnapMapper.cc <<get_snaps>>
             dout(20) << __func__ << " " << oid << " got err " << r << dendl;
1273    162  osd/SnapMapper.cc <<get_snaps>>
             dout(20) << __func__ << " " << oid << " got.empty()" << dendl;
1274    168  osd/SnapMapper.cc <<get_snaps>>
             dout(20) << __func__ << " " << oid << " " << out->snaps << dendl;
1275    170  osd/SnapMapper.cc <<get_snaps>>
             dout(1) << __func__ << " " << oid << " empty snapset" << dendl;
1276    174  osd/SnapMapper.cc <<get_snaps>>
             dout(20) << __func__ << " " << oid << " (out == NULL)" << dendl;
1277     95  osd/Watch.cc <<do_timeout>>
             dout(10) << "timeout" << dendl;
1278    151  osd/Watch.cc <<start_watcher>>
             dout(10) << "start_watcher" << dendl;
1279    158  osd/Watch.cc <<complete_watcher>>
             dout(10) << "complete_watcher" << dendl;
1280    172  osd/Watch.cc <<complete_watcher_remove>>
             dout(10) << __func__ << dendl;
1281    182  osd/Watch.cc <<maybe_complete_notify>>
             dout(10) << "maybe_complete_notify -- "
1282    269  osd/Watch.cc <<finish>>
             dout(10) << "HandleWatchTimeoutDelayed" << dendl;
1283    304  osd/Watch.cc <<Watch>>
             dout(10) << "Watch()" << dendl;
1284    304  osd/Watch.cc <<discarded>>
             dout(10) << "Watch()" << dendl;
1285    308  osd/Watch.cc <<Watch>>
             dout(10) << "~Watch" << dendl;
1286    327  osd/Watch.cc <<register_cb>>
             dout(15) << "re-registering callback, timeout: " << timeout << dendl;
1287    331  osd/Watch.cc <<register_cb>>
             dout(15) << "registering callback, timeout: " << timeout << dendl;
1288    341  osd/Watch.cc <<unregister_cb>>
             dout(15) << "unregister_cb" << dendl;
1289    344  osd/Watch.cc <<unregister_cb>>
             dout(15) << "actually registered, cancelling" << dendl;
1290    364  osd/Watch.cc <<connect>>
             dout(10) << __func__ << " con " << con << " - already connected" << dendl;
1291    367  osd/Watch.cc <<connect>>
             dout(10) << __func__ << " con " << con << dendl;
1292    390  osd/Watch.cc <<disconnect>>
             dout(10) << "disconnect (con was " << conn << ")" << dendl;
1293    398  osd/Watch.cc <<discard>>
             dout(10) << "discard" << dendl;
1294    433  osd/Watch.cc <<remove>>
             dout(10) << "remove" << dendl;
1295    456  osd/Watch.cc <<start_notify>>
             dout(10) << __func__ << " " << notif->notify_id
1296    463  osd/Watch.cc <<start_notify>>
             dout(10) << "start_notify " << notif->notify_id << dendl;
1297    472  osd/Watch.cc <<cancel_notify>>
             dout(10) << "cancel_notify " << notif->notify_id << dendl;
1298    478  osd/Watch.cc <<send_notify>>
             dout(10) << "send_notify" << dendl;
1299    488  osd/Watch.cc <<notify_ack>>
             dout(10) << "notify_ack" << dendl;
Type number and <Enter> (empty cancels): 

E492: Not an editor command: redit > lderr
